{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WordOps site \u2022 Community forum \u2022 Slack \u2022 Twitter Key Features \u00b6 Easy to install : One step automated installer with migration from EasyEngine v3 support Fast deployment : Fast and automated WordPress, Nginx, PHP, MySQL & Redis installation Up-to-date : Nginx 1.14.2 with Brotli support, PHP 7.2 & 7.3, MariaDB 10.3 & Redis 5.0 Secured : Hardened WordPress security with strict Nginx location directives Powerful : Optimized Nginx configurations with multiple cache backends support SSL : Let's Encrypt SSL certificates handled by Acme.sh Modern : Secured SSL/TLS encryption with strong ciphers_suite and modern TLS protocols Welcome on WordOps documentation. Warning Documentation writing is in progress, we will add missing informations as soon as possible Info If you were using EasyEngine v3 previously, you will probably be interested by our EasyEngine migration guide Getting Support \u00b6 If you do not find the informations you were looking for in our documentation, you can still ask your question on our Community Forum . If you think you have found an issue directly related to WordOps, please open an issue on the Github repository Contributing \u00b6 Like other open-source project, WordOps needs your contributions to live. There is no need to be a developer or a system administrator to contribute to WordOps project. Suggestions, bug reports and pull requests are warmly welcome. This documentation was built with mkdocs to provide the ability to edit content and propose changes easily on Github. A short guide about how to edit WordOps documentation is available on the github repository Credits \u00b6 EasyEngine","title":"Home"},{"location":"#key-features","text":"Easy to install : One step automated installer with migration from EasyEngine v3 support Fast deployment : Fast and automated WordPress, Nginx, PHP, MySQL & Redis installation Up-to-date : Nginx 1.14.2 with Brotli support, PHP 7.2 & 7.3, MariaDB 10.3 & Redis 5.0 Secured : Hardened WordPress security with strict Nginx location directives Powerful : Optimized Nginx configurations with multiple cache backends support SSL : Let's Encrypt SSL certificates handled by Acme.sh Modern : Secured SSL/TLS encryption with strong ciphers_suite and modern TLS protocols Welcome on WordOps documentation. Warning Documentation writing is in progress, we will add missing informations as soon as possible Info If you were using EasyEngine v3 previously, you will probably be interested by our EasyEngine migration guide","title":"Key Features"},{"location":"#getting-support","text":"If you do not find the informations you were looking for in our documentation, you can still ask your question on our Community Forum . If you think you have found an issue directly related to WordOps, please open an issue on the Github repository","title":"Getting Support"},{"location":"#contributing","text":"Like other open-source project, WordOps needs your contributions to live. There is no need to be a developer or a system administrator to contribute to WordOps project. Suggestions, bug reports and pull requests are warmly welcome. This documentation was built with mkdocs to provide the ability to edit content and propose changes easily on Github. A short guide about how to edit WordOps documentation is available on the github repository","title":"Contributing"},{"location":"#credits","text":"EasyEngine","title":"Credits"},{"location":"commands/","text":"WordOps commands \u00b6 The WordOps commands structure : wo ( command ) [ options ] Overview \u00b6 command feature example site create, update, delete, list sites wo site create site.tld --wp stack install/remove WordOps server stacks wo stack install --nginx debug commands to do server level debugging wo debug site.tld --php clean clean Wordops cache backend wo clean --fastcgi info display server stack informations wo info --nginx log perform operation on logs wo log show --nginx secure manage WordOps backend authentification wo secure --auth maintenance perform server package updates wo maintenance update update WordOps wo update","title":"Overview"},{"location":"commands/#wordops-commands","text":"The WordOps commands structure : wo ( command ) [ options ]","title":"WordOps commands"},{"location":"commands/#overview","text":"command feature example site create, update, delete, list sites wo site create site.tld --wp stack install/remove WordOps server stacks wo stack install --nginx debug commands to do server level debugging wo debug site.tld --php clean clean Wordops cache backend wo clean --fastcgi info display server stack informations wo info --nginx log perform operation on logs wo log show --nginx secure manage WordOps backend authentification wo secure --auth maintenance perform server package updates wo maintenance update update WordOps wo update","title":"Overview"},{"location":"creating-sites/","text":"Creating site \u00b6 You can create site with WordOps by using the command wo site create . WordOps will always : install required stack if needed configure Nginx vhost create site directory WordOps can also : create the site database install WordPress (with or without caching) secure site with Let's Encrypt SSL certificate You can see all the options available to create site in the command list site create Additional informations \u00b6 Component Path Site files /var/www/site.tld/htdocs wp-config.php /var/www/site.tld/wp-config.php Additional Nginx conf /var/www/site.tld/conf/nginx/ Site access/error logs /var/www/site.tld/logs Examples \u00b6 Basic site \u00b6 Basic html site wo site create site.tld --html Simple PHP site wo site create site.tld --php Simple PHP + MySQL site wo site create site.tld --mysql WordPress site \u00b6 Simple WordPress site wo site create site.tld --wp WordPress site with Nginx fastcgi_cache wo site create site.tld --wpfc WordPress site with Redis cache wo site create site.tld --wpredis PHP 7.3 \u00b6 Simple PHP 7.3 + MySQL site wo site create site.tld --mysql --php73 Simple PHP 7.3 site wo site create site.tld --php73 Simple WordPress site with PHP 7.3 wo site create site.tld --wp ---php73 Let's Encrypt \u00b6 WordPress site secured with Let's Encrypt wo site create site.tld --wp --letsencrypt WordPress site on subdomain secure with Let's Encrypt wo site create site.tld --wp --letsencrypt = subdomain WordPress site with PHP 7.3 and secured by Let's Encrypt wo site create site.tld --wp --php73 --letsencrypt","title":"Creating sites"},{"location":"creating-sites/#creating-site","text":"You can create site with WordOps by using the command wo site create . WordOps will always : install required stack if needed configure Nginx vhost create site directory WordOps can also : create the site database install WordPress (with or without caching) secure site with Let's Encrypt SSL certificate You can see all the options available to create site in the command list site create","title":"Creating site"},{"location":"creating-sites/#additional-informations","text":"Component Path Site files /var/www/site.tld/htdocs wp-config.php /var/www/site.tld/wp-config.php Additional Nginx conf /var/www/site.tld/conf/nginx/ Site access/error logs /var/www/site.tld/logs","title":"Additional informations"},{"location":"creating-sites/#examples","text":"","title":"Examples"},{"location":"creating-sites/#basic-site","text":"Basic html site wo site create site.tld --html Simple PHP site wo site create site.tld --php Simple PHP + MySQL site wo site create site.tld --mysql","title":"Basic site"},{"location":"creating-sites/#wordpress-site","text":"Simple WordPress site wo site create site.tld --wp WordPress site with Nginx fastcgi_cache wo site create site.tld --wpfc WordPress site with Redis cache wo site create site.tld --wpredis","title":"WordPress site"},{"location":"creating-sites/#php-73","text":"Simple PHP 7.3 + MySQL site wo site create site.tld --mysql --php73 Simple PHP 7.3 site wo site create site.tld --php73 Simple WordPress site with PHP 7.3 wo site create site.tld --wp ---php73","title":"PHP 7.3"},{"location":"creating-sites/#lets-encrypt","text":"WordPress site secured with Let's Encrypt wo site create site.tld --wp --letsencrypt WordPress site on subdomain secure with Let's Encrypt wo site create site.tld --wp --letsencrypt = subdomain WordPress site with PHP 7.3 and secured by Let's Encrypt wo site create site.tld --wp --php73 --letsencrypt","title":"Let's Encrypt"},{"location":"faq/","text":"F.A.Q \u00b6 General questions \u00b6 What is WordOps ? \u00b6 WordOps is a command line tool which ease server administration and WordPress deployment by providing the ability to setup an optimized LEMP stack (Nginx, PHP, MySQL) with simple command like wo stack install --nginx . What are WordOps main feature ? \u00b6 WordOps not only installs and configures the packages needed to deploy a site (Nginx, PHP, MariaDB) but it also takes care of creating Nginx vhosts and the database, installing WordPress and even get a Let's Encrypt SSL certificate, all in one command line. It support multiple cache backend for WordPress, including Nginx fastcgi_cache, Redis cache (full-page cache + object cache) or wp-super-cache, based on a highly optimized Nginx configuration and an hardened security with strict location directives. Which operating systems are supported by WordOps ? \u00b6 WordOps can be installed on Ubuntu LTS (Long Term Service) releases (16.04 & 18.04) as well as on Debian 8 (Jessie) or Debian 9 (stretch) Support for other linux distribution isn't planned. Technical questions \u00b6 Which version of PHP does WordOps support ? \u00b6 WordOps support PHP 7.2 (default) and PHP 7.3. What is the best caching solution for WordPress ? \u00b6 There is no \"best solution\", because there are benefits/disadvantage for each caching solution and it depend on your usage. Here some informations : fastcgi_cache ( --wpfc ) is the simplest solution, because it do not rely on any plugin excepted nginx_helper used to purge cache after content updates. redis-cache ( --wpredis ) is a powerful solution which support multi-server setup and it provide full-page cache in redis via Nginx + object-cache via Redis-Object-Cache plugin (also used to purge cache) wp-super-cache ( --wpsc ) is a basic solution based on a plugin which create and serve static html files. Why gzip compression is disabled by default ? \u00b6 We disabled gzip compression by default due to gzip related security issues when using TLS connection. More informations here BREACH CVE . We replaced gzip by brotli, which provide better performance and compression than gzip.","title":"F.A.Q"},{"location":"faq/#faq","text":"","title":"F.A.Q"},{"location":"faq/#general-questions","text":"","title":"General questions"},{"location":"faq/#what-is-wordops","text":"WordOps is a command line tool which ease server administration and WordPress deployment by providing the ability to setup an optimized LEMP stack (Nginx, PHP, MySQL) with simple command like wo stack install --nginx .","title":"What is WordOps ?"},{"location":"faq/#what-are-wordops-main-feature","text":"WordOps not only installs and configures the packages needed to deploy a site (Nginx, PHP, MariaDB) but it also takes care of creating Nginx vhosts and the database, installing WordPress and even get a Let's Encrypt SSL certificate, all in one command line. It support multiple cache backend for WordPress, including Nginx fastcgi_cache, Redis cache (full-page cache + object cache) or wp-super-cache, based on a highly optimized Nginx configuration and an hardened security with strict location directives.","title":"What are WordOps main feature ?"},{"location":"faq/#which-operating-systems-are-supported-by-wordops","text":"WordOps can be installed on Ubuntu LTS (Long Term Service) releases (16.04 & 18.04) as well as on Debian 8 (Jessie) or Debian 9 (stretch) Support for other linux distribution isn't planned.","title":"Which operating systems are supported by WordOps ?"},{"location":"faq/#technical-questions","text":"","title":"Technical questions"},{"location":"faq/#which-version-of-php-does-wordops-support","text":"WordOps support PHP 7.2 (default) and PHP 7.3.","title":"Which version of PHP does WordOps support ?"},{"location":"faq/#what-is-the-best-caching-solution-for-wordpress","text":"There is no \"best solution\", because there are benefits/disadvantage for each caching solution and it depend on your usage. Here some informations : fastcgi_cache ( --wpfc ) is the simplest solution, because it do not rely on any plugin excepted nginx_helper used to purge cache after content updates. redis-cache ( --wpredis ) is a powerful solution which support multi-server setup and it provide full-page cache in redis via Nginx + object-cache via Redis-Object-Cache plugin (also used to purge cache) wp-super-cache ( --wpsc ) is a basic solution based on a plugin which create and serve static html files.","title":"What is the best caching solution for WordPress ?"},{"location":"faq/#why-gzip-compression-is-disabled-by-default","text":"We disabled gzip compression by default due to gzip related security issues when using TLS connection. More informations here BREACH CVE . We replaced gzip by brotli, which provide better performance and compression than gzip.","title":"Why gzip compression is disabled by default ?"},{"location":"how-to/","text":"How to ? \u00b6 General WordOps usage \u00b6 How to get a list of WordOps commands ? \u00b6 To get the list of WordOps commands, you can use the command : wo Then for any subcommand, you just have to add the arugment -h or --help to display command informations with examples. wo site --help How to get the MySQL root password ? \u00b6 MySQL root password is stored in the file /etc/mysql/conf.d/my.cnf How to change WordOps backend on port 22222 username and password ? \u00b6 You can use the command : wo secure --auth","title":"How to"},{"location":"how-to/#how-to","text":"","title":"How to ?"},{"location":"how-to/#general-wordops-usage","text":"","title":"General WordOps usage"},{"location":"how-to/#how-to-get-a-list-of-wordops-commands","text":"To get the list of WordOps commands, you can use the command : wo Then for any subcommand, you just have to add the arugment -h or --help to display command informations with examples. wo site --help","title":"How to get a list of WordOps commands ?"},{"location":"how-to/#how-to-get-the-mysql-root-password","text":"MySQL root password is stored in the file /etc/mysql/conf.d/my.cnf","title":"How to get the MySQL root password ?"},{"location":"how-to/#how-to-change-wordops-backend-on-port-22222-username-and-password","text":"You can use the command : wo secure --auth","title":"How to change WordOps backend on port 22222 username and password ?"},{"location":"installation-guide/","text":"Installation \u00b6 One-Step Automated Install \u00b6 We provide an installer script which install the required dependencies, before setting-up WordOps. It can be installed with the following command : curl -sL wops.cc | sudo -E bash - Alternative : Clone Github repository and run \u00b6 git clone https://github.com/WordOps/WordOps.git $HOME /WordOps cd $HOME /WordOps sudo bash install Information During the installation, you will be prompt for an username and an email address. WordOps need those informations to configure Git version control and to use it for saving server configurations. Your informations will only be stored in the file .gitconfig. Manual Installation \u00b6 If you prefer to perform yourself the same steps than our installer script, here how to install WordOps manually. Install WordOps dependencies \u00b6 # On Ubuntu apt-get install build-essential bash-completion curl gzip python3 \\ python3-apt python3-setuptools python3-dev sqlite3 git tar \\ software-properties-common pigz gnupg2 fail2ban cron ccze rsync -y # On Debian apt-get install build-essential bash-completion curl gzip dirmngr \\ sudo python3 python3-apt python3-setuptools python3-dev \\ ca-certificates sqlite3 git tar software-properties-common \\ pigz apt-transport-https gnupg2 fail2ban cron ccze rsync -y Clone the github repository \u00b6 git clone https://github.com/WordOps/WordOps.git Install WordOps \u00b6 cd WordOps/ python3 setup.py install","title":"Installation"},{"location":"installation-guide/#installation","text":"","title":"Installation"},{"location":"installation-guide/#one-step-automated-install","text":"We provide an installer script which install the required dependencies, before setting-up WordOps. It can be installed with the following command : curl -sL wops.cc | sudo -E bash -","title":"One-Step Automated Install"},{"location":"installation-guide/#alternative-clone-github-repository-and-run","text":"git clone https://github.com/WordOps/WordOps.git $HOME /WordOps cd $HOME /WordOps sudo bash install Information During the installation, you will be prompt for an username and an email address. WordOps need those informations to configure Git version control and to use it for saving server configurations. Your informations will only be stored in the file .gitconfig.","title":"Alternative : Clone Github repository and run"},{"location":"installation-guide/#manual-installation","text":"If you prefer to perform yourself the same steps than our installer script, here how to install WordOps manually.","title":"Manual Installation"},{"location":"installation-guide/#install-wordops-dependencies","text":"# On Ubuntu apt-get install build-essential bash-completion curl gzip python3 \\ python3-apt python3-setuptools python3-dev sqlite3 git tar \\ software-properties-common pigz gnupg2 fail2ban cron ccze rsync -y # On Debian apt-get install build-essential bash-completion curl gzip dirmngr \\ sudo python3 python3-apt python3-setuptools python3-dev \\ ca-certificates sqlite3 git tar software-properties-common \\ pigz apt-transport-https gnupg2 fail2ban cron ccze rsync -y","title":"Install WordOps dependencies"},{"location":"installation-guide/#clone-the-github-repository","text":"git clone https://github.com/WordOps/WordOps.git","title":"Clone the github repository"},{"location":"installation-guide/#install-wordops","text":"cd WordOps/ python3 setup.py install","title":"Install WordOps"},{"location":"migration-from-easyengine/","text":"Migration from EasyEngine v3 \u00b6 Running WordOps install script \u00b6 The first step to migrate from EasyEngine to WordOps is to run WordOps install script with the command : curl -sL wops.cc | sudo -E bash - Info Before installing WordOps, the install script will backup all previous EasyEngine configurations. You will find them after the installation in /var/lib/wo-backup .","title":"EasyEngine Migration"},{"location":"migration-from-easyengine/#migration-from-easyengine-v3","text":"","title":"Migration from EasyEngine v3"},{"location":"migration-from-easyengine/#running-wordops-install-script","text":"The first step to migrate from EasyEngine to WordOps is to run WordOps install script with the command : curl -sL wops.cc | sudo -E bash - Info Before installing WordOps, the install script will backup all previous EasyEngine configurations. You will find them after the installation in /var/lib/wo-backup .","title":"Running WordOps install script"},{"location":"post-install-steps/","text":"Post-install Steps \u00b6 These are the first steps after you install WordOps. If you haven't installed it already, please check the installation guide . Enable bash_completion \u00b6 To enable WordOps commands auto-completion, run the following command after WordOps installation : source /etc/bash_completion.d/wo_auto.rc Installing WordOps stacks (optional) \u00b6 Before creating your first site with WordOps, you can install WordOps main stacks with the command wo stack install Here the list of WordOps components installed with the above Component Description Nginx WordOps web server PHP 7.2 PHP7.2-FPM MariaDB 10.3 Open-source version of MySQL WP-CLI The WordPress command-line tool Composer PHP packages manager MySQLTuner Command-line tool to tune MySQL phpMyAdmin MySQL server web interface Adminer lightweight phpMyAdmin alternative OpcacheGUI web interface for Opcache monitoring Netdata Monitoring suite Anemometer MySQL Slow Query Monitor","title":"Post-install steps"},{"location":"post-install-steps/#post-install-steps","text":"These are the first steps after you install WordOps. If you haven't installed it already, please check the installation guide .","title":"Post-install Steps"},{"location":"post-install-steps/#enable-bash_completion","text":"To enable WordOps commands auto-completion, run the following command after WordOps installation : source /etc/bash_completion.d/wo_auto.rc","title":"Enable bash_completion"},{"location":"post-install-steps/#installing-wordops-stacks-optional","text":"Before creating your first site with WordOps, you can install WordOps main stacks with the command wo stack install Here the list of WordOps components installed with the above Component Description Nginx WordOps web server PHP 7.2 PHP7.2-FPM MariaDB 10.3 Open-source version of MySQL WP-CLI The WordPress command-line tool Composer PHP packages manager MySQLTuner Command-line tool to tune MySQL phpMyAdmin MySQL server web interface Adminer lightweight phpMyAdmin alternative OpcacheGUI web interface for Opcache monitoring Netdata Monitoring suite Anemometer MySQL Slow Query Monitor","title":"Installing WordOps stacks (optional)"},{"location":"prerequesites/","text":"Hardware \u00b6 WordOps is very lightweight, so hardware requirements should not be a problem : ~30MB of free space 512MB RAM Operating Systems \u00b6 The following operating systems are supported: Distribution Release Architecture Ubuntu 16.04 LTS (xenial) x86_64 18.04 LTS (bionic) x86_64 Debian 8 (jessie) x86_64 9 (stretch) x86_64 Ports \u00b6 Service Port Inbound Outbound Notes SSH 22 \u2713 \u2713 You are free to use a custom port instead of the default 22 HTTP 80 \u2713 \u2713 Nginx listen on port 80 HTTPS 443 \u2713 \u2713 Nginx listen on port 443 WordOps Backend 22222 \u2713 \u2713 WordOps backend is available on port 22222 and is password protected GnuPG 1137 \u2713 Required to import APT repositories GPG keys.","title":"Prerequisites"},{"location":"prerequesites/#hardware","text":"WordOps is very lightweight, so hardware requirements should not be a problem : ~30MB of free space 512MB RAM","title":"Hardware"},{"location":"prerequesites/#operating-systems","text":"The following operating systems are supported: Distribution Release Architecture Ubuntu 16.04 LTS (xenial) x86_64 18.04 LTS (bionic) x86_64 Debian 8 (jessie) x86_64 9 (stretch) x86_64","title":"Operating Systems"},{"location":"prerequesites/#ports","text":"Service Port Inbound Outbound Notes SSH 22 \u2713 \u2713 You are free to use a custom port instead of the default 22 HTTP 80 \u2713 \u2713 Nginx listen on port 80 HTTPS 443 \u2713 \u2713 Nginx listen on port 443 WordOps Backend 22222 \u2713 \u2713 WordOps backend is available on port 22222 and is password protected GnuPG 1137 \u2713 Required to import APT repositories GPG keys.","title":"Ports"},{"location":"troubleshooting/","text":"","title":"Troubleshooting"},{"location":"commands/clean/","text":"clean \u00b6 Clean NGINX FastCGI cache, Opcache, Memcached, Redis Cache Usage : wo clean [ options ] If options are empty, default is --fastcgi . optional arguments description --fastcgi clean Nginx fastcgi_cache --redis clean redis cache --memcache clean memcached cache --opcache clean opcache --all clean all cache","title":"clean"},{"location":"commands/clean/#clean","text":"Clean NGINX FastCGI cache, Opcache, Memcached, Redis Cache Usage : wo clean [ options ] If options are empty, default is --fastcgi . optional arguments description --fastcgi clean Nginx fastcgi_cache --redis clean redis cache --memcache clean memcached cache --opcache clean opcache --all clean all cache","title":"clean"},{"location":"commands/debug/","text":"debug \u00b6 Used for server level debugging Usage : wo debug [ options ]","title":"debug"},{"location":"commands/debug/#debug","text":"Used for server level debugging Usage : wo debug [ options ]","title":"debug"},{"location":"commands/info/","text":"info \u00b6 Display configuration information related to Nginx, PHP and MySQL Usage : wo info [ options ] optional arguments description --nginx Get Nginx configuration information --php Get PHP 7.2 configuration information --php73 Get PHP 7.3 configuration information --mysql Get MySQL configuration information","title":"info"},{"location":"commands/info/#info","text":"Display configuration information related to Nginx, PHP and MySQL Usage : wo info [ options ] optional arguments description --nginx Get Nginx configuration information --php Get PHP 7.2 configuration information --php73 Get PHP 7.3 configuration information --mysql Get MySQL configuration information","title":"info"},{"location":"commands/log/","text":"log \u00b6 Perform operations on Nginx, PHP and MySQL log files Usage : wo log [ <site_name> ] [ options ] options description gzip GZip Nginx, PHP, MySQL log file mail Mail Nginx, PHP, MySQL log file reset Reset Nginx, PHP, MySQL log file show Show Nginx, PHP, MySQL log file log show \u00b6 Show Nginx, PHP, MySQL log file Usage : wo log show [ <site_name> ] [ options ] </site_name> optional arguments description --nginx Show Nginx Error logs file --php Show PHP Error logs file --mysql Show MySQL logs file --wp Show Site specific WordPress logs file","title":"log"},{"location":"commands/log/#log","text":"Perform operations on Nginx, PHP and MySQL log files Usage : wo log [ <site_name> ] [ options ] options description gzip GZip Nginx, PHP, MySQL log file mail Mail Nginx, PHP, MySQL log file reset Reset Nginx, PHP, MySQL log file show Show Nginx, PHP, MySQL log file","title":"log"},{"location":"commands/log/#log-show","text":"Show Nginx, PHP, MySQL log file Usage : wo log show [ <site_name> ] [ options ] </site_name> optional arguments description --nginx Show Nginx Error logs file --php Show PHP Error logs file --mysql Show MySQL logs file --wp Show Site specific WordPress logs file","title":"log show"},{"location":"commands/maintenance/","text":"maintenance \u00b6 Update apt-cache and upgrade packages. Usage : wo maintenance This command is equivalent to : apt update apt dist-upgrade apt autoremove --purge apt autoclean Package update is performed in a non-interactive way, with the \"--force-confold\" policy, to never overwrite packages configurations.","title":"maintenance"},{"location":"commands/maintenance/#maintenance","text":"Update apt-cache and upgrade packages. Usage : wo maintenance This command is equivalent to : apt update apt dist-upgrade apt autoremove --purge apt autoclean Package update is performed in a non-interactive way, with the \"--force-confold\" policy, to never overwrite packages configurations.","title":"maintenance"},{"location":"commands/secure/","text":"secure \u00b6 Secure backend authentification, ip and port Usage : wo secure [ options ]","title":"secure"},{"location":"commands/secure/#secure","text":"Secure backend authentification, ip and port Usage : wo secure [ options ]","title":"secure"},{"location":"commands/site/","text":"site \u00b6 Performs website specific operations Usage : wo site ( command ) [ options ] subcommand description create Create site with WordOps update Update site type or configuration show Show site Nginx configuration start Edit site Nginx configuration delete Delete site list list all sites enable Enable site in Nginx disable Disable site in Nginx site create \u00b6 Usage : wo site create [ <site_name> ] [ options ] Basic sites \u00b6 HTML site \u00b6 To create simple html website use this command. wo site create site.tld --html PHP site \u00b6 To create simple php website with no database use this command. wo site create site.tld --php PHP+MySQL site \u00b6 To create simple php website with database use this command. wo site create site.tld --mysql NOTE: You can find MySQL database details in /var/www/site.tld/wo-config.php . Proxy site \u00b6 To create site with Proxy configuration you can use --proxy during site creation wo site create site.tld --proxy = 127 .0.0.1:3000 This will create proxy site site.tld with proxy destination as 127.0.0.1:3000. Port is optional. Default port : 80. WordPress \u00b6 Following are the WordPress website types you can create website based on Cache Mechanism Standard sites \u00b6 cache PHP example no cache PHP 7.2 wo site create site.tld --wp no cache PHP 7.3 wo site create site.tld --wp --php73 fastcgi_cache PHP 7.2 wo site create site.tld --wpfc fastcgi_cache PHP 7.3 wo site create site.tld --wpfc --php73 wp-super-cache PHP 7.2 wo site create site.tld --wpsc wp-super-cache PHP 7.3 wo site create site.tld --wpsc --php73 redis-cache PHP 7.2 wo site create site.tld --wpredis redis-cache PHP 7.3 wo site create site.tld --wpredis --php73 Multisite subdirectory \u00b6 cache PHP example no cache PHP 7.2 wo site create site.tld --wpsubdir no cache PHP 7.3 wo site create site.tld --wpsubdir --php73 fastcgi_cache PHP 7.2 wo site create site.tld --wpsubdir --wpfc fastcgi_cache PHP 7.3 wo site create site.tld --wpsubdir --wpfc --php73 wp-super-cache PHP 7.2 wo site create site.tld --wpsubdir --wpsc wp-super-cache PHP 7.3 wo site create site.tld --wpsubdir --wpsc --php73 redis-cache PHP 7.2 wo site create site.tld --wpsubdir --wpredis redis-cache PHP 7.3 wo site create site.tld --wpsubdir --wpredis --php73 Multisite subdomain \u00b6 cache PHP example no cache PHP 7.2 wo site create site.tld --wpsubdom no cache PHP 7.3 wo site create site.tld --wpsubdom --php73 fastcgi_cache PHP 7.2 wo site create site.tld --wpsubdir --wpfc fastcgi_cache PHP 7.3 wo site create site.tld --wpsubdom --wpfc --php73 wp-super-cache PHP 7.2 wo site create site.tld --wpsubdom --wpsc wp-super-cache PHP 7.3 wo site create site.tld --wpsubdom --wpsc --php73 redis-cache PHP 7.2 wo site create site.tld --wpsubdom --wpredis redis-cache PHP 7.3 wo site create site.tld --wpsubdom --wpredis --php73 Extra settings \u00b6 Define WordPress administrator user To define wordpress administrator user during site creation use wo site create site.tld --user = admin This will create admin as administrator user in wordpress during installation. If not defined it will take git user name. Define WordPress administrator password To define wordpress administrator password during site creation use wo site create site.tld --pass = password This will set defined password as administrator password. If not defined it will generate random pasword for administrator. If you have special characters, you can quote them using single quotes like this : --pass='my$secret&' Define WordPress administrator email To define wordpress administrator email during site creation use wo site create site.tld --email = wo@site.tld This will set defined email as administrator email. If not defined it will set git email as administrator email. Let's Encrypt \u00b6 WordOps supports Let's Encrypt out of the box. wo site create site.tld --letsencrypt This command will issue a certificate for site.tld + www.site.tld. But WordOps also supports issuing Let's Encrypt certificates with subdomains. wo site create site.tld --letsencrypt = subdomain You can add --letsencrypt to any other flag. PHP 7.3 \u00b6 To create site with PHP 7.3 you can use --php73 during site creation For example, you can create WordPress site running on PHP 7.3 using following command: wo site create site.tld --wp --php73 To create simple php(with v7.3) website with no database use this command. wo site create site.tld --php73 Usage \u00b6 Standard WordPress sites \u00b6 wo site create example.com --wp # install wordpress without any page caching wo site create example.com --wpsc # install wordpress with wp-super-cache plugin wo site create example.com --wpfc # install wordpress + nginx fastcgi_cache wo site create example.com --wpredis # install wordpress + nginx redis_cache WordPress multisite with subdirectory \u00b6 wo site create example.com --wpsubdir # install wpmu-subdirectory without any page caching wo site create example.com --wpsubdir --wpsc # install wpmu-subdirectory with wp-super-cache plugin wo site create example.com --wpsubdir --wpfc # install wpmu-subdirectory + nginx fastcgi_cache wo site create example.com --wpsubdir --wpredis # install wpmu-subdirectory + nginx redis_cache WordPress multisite with subdomain \u00b6 wo site create example.com --wpsubdomain # install wpmu-subdomain without any page caching wo site create example.com --wpsubdomain --wpsc # install wpmu-subdomain with wp-super-cache plugin wo site create example.com --wpsubdomain --wpfc # install wpmu-subdomain + nginx fastcgi_cache wo site create example.com --wpsubdomain --wpredis # install wpmu-subdomain + nginx redis_cache Non-WordPress sites \u00b6 wo site create example.com --html # create example.com for static/html sites wo site create example.com --php # create example.com with php support wo site create example.com --mysql # create example.com with php & mysql support wo site create example.com --proxy = 127 .0.0.1:3000 # create example.com with nginx as reverse-proxy PHP 7.3 sites \u00b6 wo site create site.tld --wp --php73 # install wordpress with PHP 7.3 wo site create site.tld --wpredis --php73 # create site.tld with PHP 7.3 & MySQL support Sites secured with Let's Encrypt \u00b6 wo site create example.com --wp --letsencrypt # install wordpress & secure site with letsencrypt wo site create sub.example.com --wp --letsencrypt = subdomain # install wordpress and secure subdomain with letsencrypt site update \u00b6 Update site configuration Usage : wo site update [ <site_name> ] [ options ] options description --html update to html site --php update to php site --mysql update to MySQL + PHP site --php73 update site to PHP 7.3 --php73=off disable PHP 7.3 --wp update site to WordPress without cache --wpfc update site to WordPress with fastcgi_cache --wpsc update site to WordPress with wp-super-cache --wpredis update site to WordPress with redis-cache --wpsubdir update site to WordPress multisite on subdirectories --wpsubdomain update site to WordPress multisite on subdomains --password update admin password for a WordPress site --letsencrypt , --le secure site with Let's Encrypt SSL certificate --letsencrypt=subdomain secure site running on a subdomain with Let's Encrypt --letsencrypt=off disable Let's Encrypt SSL certificate site delete \u00b6 Usage : wo site delete [ <site_name> ] [ options ] options description --no-prompt delete website without confirmation prompt --files delete only website files --db delete only database","title":"site"},{"location":"commands/site/#site","text":"Performs website specific operations Usage : wo site ( command ) [ options ] subcommand description create Create site with WordOps update Update site type or configuration show Show site Nginx configuration start Edit site Nginx configuration delete Delete site list list all sites enable Enable site in Nginx disable Disable site in Nginx","title":"site"},{"location":"commands/site/#site-create","text":"Usage : wo site create [ <site_name> ] [ options ]","title":"site create"},{"location":"commands/site/#basic-sites","text":"","title":"Basic sites"},{"location":"commands/site/#html-site","text":"To create simple html website use this command. wo site create site.tld --html","title":"HTML site"},{"location":"commands/site/#php-site","text":"To create simple php website with no database use this command. wo site create site.tld --php","title":"PHP site"},{"location":"commands/site/#phpmysql-site","text":"To create simple php website with database use this command. wo site create site.tld --mysql NOTE: You can find MySQL database details in /var/www/site.tld/wo-config.php .","title":"PHP+MySQL site"},{"location":"commands/site/#proxy-site","text":"To create site with Proxy configuration you can use --proxy during site creation wo site create site.tld --proxy = 127 .0.0.1:3000 This will create proxy site site.tld with proxy destination as 127.0.0.1:3000. Port is optional. Default port : 80.","title":"Proxy site"},{"location":"commands/site/#wordpress","text":"Following are the WordPress website types you can create website based on Cache Mechanism","title":"WordPress"},{"location":"commands/site/#standard-sites","text":"cache PHP example no cache PHP 7.2 wo site create site.tld --wp no cache PHP 7.3 wo site create site.tld --wp --php73 fastcgi_cache PHP 7.2 wo site create site.tld --wpfc fastcgi_cache PHP 7.3 wo site create site.tld --wpfc --php73 wp-super-cache PHP 7.2 wo site create site.tld --wpsc wp-super-cache PHP 7.3 wo site create site.tld --wpsc --php73 redis-cache PHP 7.2 wo site create site.tld --wpredis redis-cache PHP 7.3 wo site create site.tld --wpredis --php73","title":"Standard sites"},{"location":"commands/site/#multisite-subdirectory","text":"cache PHP example no cache PHP 7.2 wo site create site.tld --wpsubdir no cache PHP 7.3 wo site create site.tld --wpsubdir --php73 fastcgi_cache PHP 7.2 wo site create site.tld --wpsubdir --wpfc fastcgi_cache PHP 7.3 wo site create site.tld --wpsubdir --wpfc --php73 wp-super-cache PHP 7.2 wo site create site.tld --wpsubdir --wpsc wp-super-cache PHP 7.3 wo site create site.tld --wpsubdir --wpsc --php73 redis-cache PHP 7.2 wo site create site.tld --wpsubdir --wpredis redis-cache PHP 7.3 wo site create site.tld --wpsubdir --wpredis --php73","title":"Multisite subdirectory"},{"location":"commands/site/#multisite-subdomain","text":"cache PHP example no cache PHP 7.2 wo site create site.tld --wpsubdom no cache PHP 7.3 wo site create site.tld --wpsubdom --php73 fastcgi_cache PHP 7.2 wo site create site.tld --wpsubdir --wpfc fastcgi_cache PHP 7.3 wo site create site.tld --wpsubdom --wpfc --php73 wp-super-cache PHP 7.2 wo site create site.tld --wpsubdom --wpsc wp-super-cache PHP 7.3 wo site create site.tld --wpsubdom --wpsc --php73 redis-cache PHP 7.2 wo site create site.tld --wpsubdom --wpredis redis-cache PHP 7.3 wo site create site.tld --wpsubdom --wpredis --php73","title":"Multisite subdomain"},{"location":"commands/site/#extra-settings","text":"Define WordPress administrator user To define wordpress administrator user during site creation use wo site create site.tld --user = admin This will create admin as administrator user in wordpress during installation. If not defined it will take git user name. Define WordPress administrator password To define wordpress administrator password during site creation use wo site create site.tld --pass = password This will set defined password as administrator password. If not defined it will generate random pasword for administrator. If you have special characters, you can quote them using single quotes like this : --pass='my$secret&' Define WordPress administrator email To define wordpress administrator email during site creation use wo site create site.tld --email = wo@site.tld This will set defined email as administrator email. If not defined it will set git email as administrator email.","title":"Extra settings"},{"location":"commands/site/#lets-encrypt","text":"WordOps supports Let's Encrypt out of the box. wo site create site.tld --letsencrypt This command will issue a certificate for site.tld + www.site.tld. But WordOps also supports issuing Let's Encrypt certificates with subdomains. wo site create site.tld --letsencrypt = subdomain You can add --letsencrypt to any other flag.","title":"Let's Encrypt"},{"location":"commands/site/#php-73","text":"To create site with PHP 7.3 you can use --php73 during site creation For example, you can create WordPress site running on PHP 7.3 using following command: wo site create site.tld --wp --php73 To create simple php(with v7.3) website with no database use this command. wo site create site.tld --php73","title":"PHP 7.3"},{"location":"commands/site/#usage","text":"","title":"Usage"},{"location":"commands/site/#standard-wordpress-sites","text":"wo site create example.com --wp # install wordpress without any page caching wo site create example.com --wpsc # install wordpress with wp-super-cache plugin wo site create example.com --wpfc # install wordpress + nginx fastcgi_cache wo site create example.com --wpredis # install wordpress + nginx redis_cache","title":"Standard WordPress sites"},{"location":"commands/site/#wordpress-multisite-with-subdirectory","text":"wo site create example.com --wpsubdir # install wpmu-subdirectory without any page caching wo site create example.com --wpsubdir --wpsc # install wpmu-subdirectory with wp-super-cache plugin wo site create example.com --wpsubdir --wpfc # install wpmu-subdirectory + nginx fastcgi_cache wo site create example.com --wpsubdir --wpredis # install wpmu-subdirectory + nginx redis_cache","title":"WordPress multisite with subdirectory"},{"location":"commands/site/#wordpress-multisite-with-subdomain","text":"wo site create example.com --wpsubdomain # install wpmu-subdomain without any page caching wo site create example.com --wpsubdomain --wpsc # install wpmu-subdomain with wp-super-cache plugin wo site create example.com --wpsubdomain --wpfc # install wpmu-subdomain + nginx fastcgi_cache wo site create example.com --wpsubdomain --wpredis # install wpmu-subdomain + nginx redis_cache","title":"WordPress multisite with subdomain"},{"location":"commands/site/#non-wordpress-sites","text":"wo site create example.com --html # create example.com for static/html sites wo site create example.com --php # create example.com with php support wo site create example.com --mysql # create example.com with php & mysql support wo site create example.com --proxy = 127 .0.0.1:3000 # create example.com with nginx as reverse-proxy","title":"Non-WordPress sites"},{"location":"commands/site/#php-73-sites","text":"wo site create site.tld --wp --php73 # install wordpress with PHP 7.3 wo site create site.tld --wpredis --php73 # create site.tld with PHP 7.3 & MySQL support","title":"PHP 7.3 sites"},{"location":"commands/site/#sites-secured-with-lets-encrypt","text":"wo site create example.com --wp --letsencrypt # install wordpress & secure site with letsencrypt wo site create sub.example.com --wp --letsencrypt = subdomain # install wordpress and secure subdomain with letsencrypt","title":"Sites secured with Let's Encrypt"},{"location":"commands/site/#site-update","text":"Update site configuration Usage : wo site update [ <site_name> ] [ options ] options description --html update to html site --php update to php site --mysql update to MySQL + PHP site --php73 update site to PHP 7.3 --php73=off disable PHP 7.3 --wp update site to WordPress without cache --wpfc update site to WordPress with fastcgi_cache --wpsc update site to WordPress with wp-super-cache --wpredis update site to WordPress with redis-cache --wpsubdir update site to WordPress multisite on subdirectories --wpsubdomain update site to WordPress multisite on subdomains --password update admin password for a WordPress site --letsencrypt , --le secure site with Let's Encrypt SSL certificate --letsencrypt=subdomain secure site running on a subdomain with Let's Encrypt --letsencrypt=off disable Let's Encrypt SSL certificate","title":"site update"},{"location":"commands/site/#site-delete","text":"Usage : wo site delete [ <site_name> ] [ options ] options description --no-prompt delete website without confirmation prompt --files delete only website files --db delete only database","title":"site delete"},{"location":"commands/stack/","text":"stack \u00b6 Manage server stack operations Usage : wo stack ( command ) [ options ] subcommand description install Install packages reload Reload WordOps stack remove Uninstall packages purge Uninstall & purge packages restart Restart WordOps stack stop Stop WordOps stack upgrade Upgrade WordOps stack start Start WordOps stack stack install \u00b6 Usage : wo stack install [ options ] Web \u00b6 This will install Nginx, PHP 7.2, MariaDB & additional tools available on port 22222 wo stack install or wo stack install web Admin tools \u00b6 WordOps backend with PHPmyAdmin, Adminer, MemcachedAdmin etc.. wo stack install --admin Individual packages \u00b6 Nginx \u00b6 wo stack install --nginx PHP 7.2 \u00b6 wo stack install --php MariaDB (MySQL) \u00b6 wo stack install --mysql Adminer \u00b6 wo stack install --adminer PHPMyAdmin \u00b6 wo stack install --phpmyadmin","title":"stack"},{"location":"commands/stack/#stack","text":"Manage server stack operations Usage : wo stack ( command ) [ options ] subcommand description install Install packages reload Reload WordOps stack remove Uninstall packages purge Uninstall & purge packages restart Restart WordOps stack stop Stop WordOps stack upgrade Upgrade WordOps stack start Start WordOps stack","title":"stack"},{"location":"commands/stack/#stack-install","text":"Usage : wo stack install [ options ]","title":"stack install"},{"location":"commands/stack/#web","text":"This will install Nginx, PHP 7.2, MariaDB & additional tools available on port 22222 wo stack install or wo stack install web","title":"Web"},{"location":"commands/stack/#admin-tools","text":"WordOps backend with PHPmyAdmin, Adminer, MemcachedAdmin etc.. wo stack install --admin","title":"Admin tools"},{"location":"commands/stack/#individual-packages","text":"","title":"Individual packages"},{"location":"commands/stack/#nginx","text":"wo stack install --nginx","title":"Nginx"},{"location":"commands/stack/#php-72","text":"wo stack install --php","title":"PHP 7.2"},{"location":"commands/stack/#mariadb-mysql","text":"wo stack install --mysql","title":"MariaDB (MySQL)"},{"location":"commands/stack/#adminer","text":"wo stack install --adminer","title":"Adminer"},{"location":"commands/stack/#phpmyadmin","text":"wo stack install --phpmyadmin","title":"PHPMyAdmin"},{"location":"commands/update/","text":"update \u00b6 Update WordOps if a new version is available Usage : wo update","title":"update"},{"location":"commands/update/#update","text":"Update WordOps if a new version is available Usage : wo update","title":"update"}]}