{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WordOps site - Community forum Key Features \u00b6 Easy to install : One step automated installer with migration from EasyEngine v3 support Fast deployment : Fast and automated WordPress, Nginx, PHP, MySQL & Redis installation Custom Nginx build : Nginx 1.16.0 - TLS v1.3 Cloudflare HTTP/2 HPACK & Brotli support Up-to-date : PHP 7.2 & 7.3, MariaDB 10.3 & Redis 5.0 Secured : Hardened WordPress security with strict Nginx location directives Powerful : Optimized Nginx configurations with multiple cache backends support SSL : Domain, Subdomain & Wildcard Let's Encrypt SSL certificates handled by acme.sh Modern : Strong ciphers_suite, modern TLS protocols and HSTS support (Grade A+ on ssllabs) Monitoring : Live Nginx vhost traffic with ngx_vts_module and server monitoring with Netdata WordOps Dashboard public demo is available on demo.wordop.eu Welcome on WordOps documentation. Warning Documentation writing is in progress, we will add missing informations as soon as possible Info If you were using EasyEngine v3 previously, you will probably be interested by our EasyEngine migration guide Getting Support \u00b6 If you do not find the informations you were looking for in our documentation, you can still ask your question on our Community Forum . If you think you have found an issue directly related to WordOps, please open an issue on the Github repository Contributing \u00b6 Like other open-source project, WordOps needs your contributions to live. There is no need to be a developer or a system administrator to contribute to WordOps project. Suggestions, bug reports and pull requests are warmly welcome. This documentation was built with mkdocs to provide the ability to edit content and propose changes easily on Github. A guide about how to edit WordOps documentation is available on the github repository Credits \u00b6 EasyEngine This documentation is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Home"},{"location":"#key-features","text":"Easy to install : One step automated installer with migration from EasyEngine v3 support Fast deployment : Fast and automated WordPress, Nginx, PHP, MySQL & Redis installation Custom Nginx build : Nginx 1.16.0 - TLS v1.3 Cloudflare HTTP/2 HPACK & Brotli support Up-to-date : PHP 7.2 & 7.3, MariaDB 10.3 & Redis 5.0 Secured : Hardened WordPress security with strict Nginx location directives Powerful : Optimized Nginx configurations with multiple cache backends support SSL : Domain, Subdomain & Wildcard Let's Encrypt SSL certificates handled by acme.sh Modern : Strong ciphers_suite, modern TLS protocols and HSTS support (Grade A+ on ssllabs) Monitoring : Live Nginx vhost traffic with ngx_vts_module and server monitoring with Netdata WordOps Dashboard public demo is available on demo.wordop.eu Welcome on WordOps documentation. Warning Documentation writing is in progress, we will add missing informations as soon as possible Info If you were using EasyEngine v3 previously, you will probably be interested by our EasyEngine migration guide","title":"Key Features"},{"location":"#getting-support","text":"If you do not find the informations you were looking for in our documentation, you can still ask your question on our Community Forum . If you think you have found an issue directly related to WordOps, please open an issue on the Github repository","title":"Getting Support"},{"location":"#contributing","text":"Like other open-source project, WordOps needs your contributions to live. There is no need to be a developer or a system administrator to contribute to WordOps project. Suggestions, bug reports and pull requests are warmly welcome. This documentation was built with mkdocs to provide the ability to edit content and propose changes easily on Github. A guide about how to edit WordOps documentation is available on the github repository","title":"Contributing"},{"location":"#credits","text":"EasyEngine This documentation is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Credits"},{"location":"commands/","text":"WordOps commands \u00b6 The WordOps commands structure : wo ( command ) [ options ] Overview \u00b6 command feature example site create, update, delete, list sites wo site create site . tld --wp stack install/remove WordOps server stacks wo stack install --nginx debug commands to do server level debugging wo debug site . tld --php clean clean Wordops cache backend wo clean --fastcgi info display server stack informations wo info --nginx log perform operation on logs wo log show -- nginx secure manage WordOps backend authentification wo secure --auth maintenance perform server package updates wo maintenance update update WordOps wo update","title":"Overview"},{"location":"commands/#wordops-commands","text":"The WordOps commands structure : wo ( command ) [ options ]","title":"WordOps commands"},{"location":"commands/#overview","text":"command feature example site create, update, delete, list sites wo site create site . tld --wp stack install/remove WordOps server stacks wo stack install --nginx debug commands to do server level debugging wo debug site . tld --php clean clean Wordops cache backend wo clean --fastcgi info display server stack informations wo info --nginx log perform operation on logs wo log show -- nginx secure manage WordOps backend authentification wo secure --auth maintenance perform server package updates wo maintenance update update WordOps wo update","title":"Overview"},{"location":"contributing/","text":"","title":"Contributing"},{"location":"faq/","text":"F.A.Q \u00b6 General \u00b6 What is WordOps ? \u00b6 WordOps is a command line tool which ease server administration and WordPress deployment by providing the ability to setup an optimized LEMP stack (Nginx, PHP, MySQL) with simple command like wo stack install --nginx . What are WordOps main features ? \u00b6 WordOps not only installs and configures the packages needed to deploy a site (Nginx, PHP, MariaDB) but it also takes care of creating Nginx vhosts and the database, installing WordPress and even get a Let's Encrypt SSL certificate, all in one command line. It support multiple cache backend for WordPress, including Nginx fastcgi_cache, Redis cache (full-page cache + object cache) or wp-super-cache, based on a highly optimized Nginx configuration and an hardened security with strict location directives. Which operating systems are supported by WordOps ? \u00b6 WordOps can be installed on Ubuntu LTS (Long Term Service) releases (16.04 & 18.04) as well as on Ubuntu 19.04, Debian 8 (Jessie), Debian 9 (stretch), Debian 10 (buster) and Raspbian 9 (stretch). Support for other linux distribution isn't planned. Technical \u00b6 Which version of PHP does WordOps support ? \u00b6 WordOps support PHP 7.2 (default) and PHP 7.3. What is the best caching solution for WordPress ? \u00b6 There is no \"best solution\", because there are benefits/disadvantage for each caching solution and it depend on your usage. Here some informations : Cache backend command argument description fastcgi_cache --wpfc the simplest solution, because it do not rely on any plugin excepted nginx_helper used to purge cache after content updates redis-cache --wpredis powerful solution which support multi-server setup and it provide full-page cache in redis via Nginx + object-cache via Redis-Object-Cache plugin (also used to purge cache) wp-super-cache --wpsc basic solution based on a plugin which create and serve static html files. Does WordOps support WP-Rocket ? \u00b6 At the moment, WP-Rocket works properly on WordOps but do not receive any performance boost from our Nginx configuration. We are going to work on it and to provide additional Nginx configurations for WP-Rocket. Why do I get warning from my web browser when opening WordOps backend ? \u00b6 At the moment, WordOps backend is secured with a self-signed SSL certificate, which provide the same level of encryption than any other certificate but do not come from a certificate authority. Your Web browser only warn you about the fact that the certificate wasn't issued by a trusted certificate authority. We are already working on adding the ability to secure WordOps backend with a letsencrypt SSL certificate. Does Nginx-wo support TLSv1.3 ? \u00b6 Yes, since the release v3.9.5.4, our Nginx package for Ubuntu 16.04/18.04/19.04 and for Debian 10 (buster) is compiled with OpenSSL 1.1.1c and support TLSv1.3. Why gzip compression is disabled by default ? \u00b6 We disabled gzip compression by default due to gzip related security issues when using TLS connection. More informations here BREACH CVE . We replaced gzip by brotli, which provide better performance and compression than gzip. Is WordOps Let's Encrypt stack compatible with Cloudflare CDN ? \u00b6 WordOps Let's Encrypt stack is compatible with Cloudflare CDN, but we still have an higher failure rate when issuing SSL certificates on domains under Cloudflare CDN. We are working on it and we will keep you update as soon as we find a workaround to this issue.","title":"F.A.Q"},{"location":"faq/#faq","text":"","title":"F.A.Q"},{"location":"faq/#general","text":"","title":"General"},{"location":"faq/#what-is-wordops","text":"WordOps is a command line tool which ease server administration and WordPress deployment by providing the ability to setup an optimized LEMP stack (Nginx, PHP, MySQL) with simple command like wo stack install --nginx .","title":"What is WordOps ?"},{"location":"faq/#what-are-wordops-main-features","text":"WordOps not only installs and configures the packages needed to deploy a site (Nginx, PHP, MariaDB) but it also takes care of creating Nginx vhosts and the database, installing WordPress and even get a Let's Encrypt SSL certificate, all in one command line. It support multiple cache backend for WordPress, including Nginx fastcgi_cache, Redis cache (full-page cache + object cache) or wp-super-cache, based on a highly optimized Nginx configuration and an hardened security with strict location directives.","title":"What are WordOps main features ?"},{"location":"faq/#which-operating-systems-are-supported-by-wordops","text":"WordOps can be installed on Ubuntu LTS (Long Term Service) releases (16.04 & 18.04) as well as on Ubuntu 19.04, Debian 8 (Jessie), Debian 9 (stretch), Debian 10 (buster) and Raspbian 9 (stretch). Support for other linux distribution isn't planned.","title":"Which operating systems are supported by WordOps ?"},{"location":"faq/#technical","text":"","title":"Technical"},{"location":"faq/#which-version-of-php-does-wordops-support","text":"WordOps support PHP 7.2 (default) and PHP 7.3.","title":"Which version of PHP does WordOps support ?"},{"location":"faq/#what-is-the-best-caching-solution-for-wordpress","text":"There is no \"best solution\", because there are benefits/disadvantage for each caching solution and it depend on your usage. Here some informations : Cache backend command argument description fastcgi_cache --wpfc the simplest solution, because it do not rely on any plugin excepted nginx_helper used to purge cache after content updates redis-cache --wpredis powerful solution which support multi-server setup and it provide full-page cache in redis via Nginx + object-cache via Redis-Object-Cache plugin (also used to purge cache) wp-super-cache --wpsc basic solution based on a plugin which create and serve static html files.","title":"What is the best caching solution for WordPress ?"},{"location":"faq/#does-wordops-support-wp-rocket","text":"At the moment, WP-Rocket works properly on WordOps but do not receive any performance boost from our Nginx configuration. We are going to work on it and to provide additional Nginx configurations for WP-Rocket.","title":"Does WordOps support WP-Rocket ?"},{"location":"faq/#why-do-i-get-warning-from-my-web-browser-when-opening-wordops-backend","text":"At the moment, WordOps backend is secured with a self-signed SSL certificate, which provide the same level of encryption than any other certificate but do not come from a certificate authority. Your Web browser only warn you about the fact that the certificate wasn't issued by a trusted certificate authority. We are already working on adding the ability to secure WordOps backend with a letsencrypt SSL certificate.","title":"Why do I get warning from my web browser when opening WordOps backend ?"},{"location":"faq/#does-nginx-wo-support-tlsv13","text":"Yes, since the release v3.9.5.4, our Nginx package for Ubuntu 16.04/18.04/19.04 and for Debian 10 (buster) is compiled with OpenSSL 1.1.1c and support TLSv1.3.","title":"Does Nginx-wo support TLSv1.3 ?"},{"location":"faq/#why-gzip-compression-is-disabled-by-default","text":"We disabled gzip compression by default due to gzip related security issues when using TLS connection. More informations here BREACH CVE . We replaced gzip by brotli, which provide better performance and compression than gzip.","title":"Why gzip compression is disabled by default ?"},{"location":"faq/#is-wordops-lets-encrypt-stack-compatible-with-cloudflare-cdn","text":"WordOps Let's Encrypt stack is compatible with Cloudflare CDN, but we still have an higher failure rate when issuing SSL certificates on domains under Cloudflare CDN. We are working on it and we will keep you update as soon as we find a workaround to this issue.","title":"Is WordOps Let's Encrypt stack compatible with Cloudflare CDN ?"},{"location":"guides/","text":"Guides & Tutorials \u00b6 Here a list of guides and tutorials about WordOps : Migration from EasyEngine v3 Issue and manage ssl certificates","title":"Overview"},{"location":"guides/#guides-tutorials","text":"Here a list of guides and tutorials about WordOps : Migration from EasyEngine v3 Issue and manage ssl certificates","title":"Guides &amp; Tutorials"},{"location":"how-to/","text":"How to ... ? \u00b6 Questions overview \u00b6 How to set default language for WordPress install ? How to secure WordOps backend with Let's Encrypt SSL certificate ? How to renew Let's Encrypt Certificates ? Other questions \u00b6 Get a list of WordOps commands \u00b6 To get the list of WordOps commands, you can use the command : wo Then for any subcommand, you just have to add the arugment -h or --help to display command informations with examples. wo site --help Get the MySQL root password \u00b6 MySQL root password is stored in the file / etc / mysql / conf . d / my . cnf Display MySQL user and password of a site \u00b6 You can use the command : wo site info site.tld Access WordOps backend \u00b6 WordOps backend is available on port 22222, you can access it with the server IP, hostname or with a domain pointed to the server IP : # with server IP https://YOUR.SERVER.IP:22222 # with server hostname https://server.site.tld:22222 # with a domain hosted on the server https://site.tld:22222 Change WordOps backend username and password \u00b6 You can use the command : wo secure --auth Renew a Let's Encrypt SSL Certificates with WordOps \u00b6 Previously with EasyEngine v3, Let's Encrypt certificates were renewed by running the command ee site update --le=renew --all with a cronjob. You may have noticed the command site update --le=renew still exist in WordOps, but you shouln't need it because WordOps use the awesome acme client acme.sh to issue and handle Let's Encrypt SSL certificates. All certificates are automatically renewed every 60 days by acme.sh using a cronjob. However, if you really need to renew your certificates, you can directly use acme.sh to renew all certificates with the following command : acme.sh --renew-all --ecc","title":"Overview"},{"location":"how-to/#how-to","text":"","title":"How to ... ?"},{"location":"how-to/#questions-overview","text":"How to set default language for WordPress install ? How to secure WordOps backend with Let's Encrypt SSL certificate ? How to renew Let's Encrypt Certificates ?","title":"Questions overview"},{"location":"how-to/#other-questions","text":"","title":"Other questions"},{"location":"how-to/#get-a-list-of-wordops-commands","text":"To get the list of WordOps commands, you can use the command : wo Then for any subcommand, you just have to add the arugment -h or --help to display command informations with examples. wo site --help","title":"Get a list of WordOps commands"},{"location":"how-to/#get-the-mysql-root-password","text":"MySQL root password is stored in the file / etc / mysql / conf . d / my . cnf","title":"Get the MySQL root password"},{"location":"how-to/#display-mysql-user-and-password-of-a-site","text":"You can use the command : wo site info site.tld","title":"Display MySQL user and password of a site"},{"location":"how-to/#access-wordops-backend","text":"WordOps backend is available on port 22222, you can access it with the server IP, hostname or with a domain pointed to the server IP : # with server IP https://YOUR.SERVER.IP:22222 # with server hostname https://server.site.tld:22222 # with a domain hosted on the server https://site.tld:22222","title":"Access WordOps backend"},{"location":"how-to/#change-wordops-backend-username-and-password","text":"You can use the command : wo secure --auth","title":"Change WordOps backend username and password"},{"location":"how-to/#renew-a-lets-encrypt-ssl-certificates-with-wordops","text":"Previously with EasyEngine v3, Let's Encrypt certificates were renewed by running the command ee site update --le=renew --all with a cronjob. You may have noticed the command site update --le=renew still exist in WordOps, but you shouln't need it because WordOps use the awesome acme client acme.sh to issue and handle Let's Encrypt SSL certificates. All certificates are automatically renewed every 60 days by acme.sh using a cronjob. However, if you really need to renew your certificates, you can directly use acme.sh to renew all certificates with the following command : acme.sh --renew-all --ecc","title":"Renew a Let's Encrypt SSL Certificates with WordOps"},{"location":"introduction/","text":"","title":"Introduction"},{"location":"troubleshooting/","text":"","title":"Troubleshooting"},{"location":"about/changelog/","text":"Changelog \u00b6 v3.9.6 - 2019-07-20 \u00b6 Added \u00b6 New Nginx package on Ubuntu with Cloudflare HTTP/2 HPACK and Dynamic TLS records phpMyAdmin upgrade with wo stack upgrade --phpmyadmin Wildcard SSL Certificates support with DNS validation Let's Encrypt DNS API support (Cloudflare, DigitalOcean, etc ..) on domain, subdomain, and wildcard Flag --letsencrypt=clean to purge a previous SSL configuration Support for Debian 10 buster (testing - not ready for production) Fail2ban with custom jails to secure WordPress & SSH Variable keylength in /etc/wo/wo.conf to define letsencrypt certificate keylenght ProFTPd stack with UFW & Fail2ban configurationz Beta branch and command wo update --beta for beta releases Extra directives in wp-config.php (limit posts revisions, set max_memory, enable auto-update for minor-releases) Fixed \u00b6 Nginx was not reloaded after enabling HSTS Netdata, Composer & Fail2Ban stack remove and purge WordPress not installed by wo site update with basic php73 sites v3.9.5.4 - 2019-07-13 \u00b6 Added \u00b6 New Nginx package on Ubuntu with TLS v1.3 support (OpenSSL 1.1.1c) Netdata upgrade with wo stack upgrade --netdata Netdata stack remove/purge Changed \u00b6 phpRedisAdmin is now installed with the stack --admin Remove memcached - not required anymore Fixed \u00b6 phpRedisAdmin installation Duplicated locations /robots.txt after upgrade to v3.9.5.3 Let's Encrypt stack wo site update --letsencrypt/--letsencrypt=off pt-query-advisor dead link Netdata persistant configuration v3.9.5.3 - 2019-06-18 \u00b6 Added \u00b6 Argument --preserve with the command wo update to keep current Nginx configuration Fixed \u00b6 Nginx upgrade failure when running wo update v3.9.5.2 - 2019-06-17 \u00b6 Added \u00b6 Non-interactive install/upgrade Argument --force with the command wo update Argument - s | --silent to perform non interactive installation Changed \u00b6 robots.txt location block moved from locations-wo.conf to wpcommon(-php7).php Fixed \u00b6 WP_CACHE_KEY_SALT set twice with wpredis WordOps version check when using wo update robots.txt file download if not created PHP-FPM socket path in stub_status.conf : PR #82 v3.9.5.1 - 2019-05-10 \u00b6 Fixed \u00b6 Adminer download link v3.9.5 - 2019-05-02 \u00b6 Added \u00b6 IPv6 support with HTTPS Brotli support in Nginx Let's Encrypt support with --proxy Install script handle migration from EEv3 load-balancing on unix socket for php-fpm stub_status vhost for metrics --letsencrypt=subdomain option opcache optimization for php-fpm EasyEngine configuration backup before migration EasyEngine configuration cleanup after migration WordOps configuration backup before upgrade Previous acme.sh certs migration \"wo maintenance\" command to perform server package update & cleanup Support for Netdata on backend : https://server.hostname:22222/netdata/ New Stacks : composer and netdata additional argument for letsencrypt : --hsts Clean Theme for adminer Credits for tools shipped with WordOps Cache exception for Easy Digital Download Additional cache exceptions for Woocommerce MySQL monitoring with Netdata WordOps-dashboard on 22222, can be installed with wo stack install Extplorer filemanager in WordOps backend Enable OSCP Stapling with Let's Encrypt Compress database backup with pigz (faster than gzip) before updating sites Support for Ubuntu 19.04 (disco) - few php extensions missing Support for Raspbian 9 (stretch) - tested on Raspberry Pi 3b+ backup letsencrypt certificate before upgrade directives emergency_restart_threshold & emergency_restart_interval to restart php-fpm in case of failure EasyEngine cronjob removal during install Kernel tweaks via systctl.conf open_basedir on php-fpm process to forbid access with php outside of /var/www & /run/nginx-cache Changed \u00b6 letsencrypt stack refactored with acme.sh letsencrypt validation with webroot folder hardened nginx ssl_ecdh_curve Update phpredisadmin Increase MySQL root password size to 24 characters Increase MySQL users password size to 24 characters Nginx locations template is the same for php7.2 & 7.3 backend SSL configuration now stored in /var/www/22222/conf/nginx/ssl.conf Install Netdata with static pre-built binaries instead of having to compile it from source Nginx updated to new stable release (1.16.0) New packages (phpmyadmin, adminer, composer) are not download in /tmp anymore Fixed \u00b6 PHP 7.3 extras when php 7.2 isn't installed acme.sh installation acme.sh alias with config home variable deb.sury.org repository gpg key Nginx upgrade from previous WordOps release Force new Nginx templates during update Error message about missing my.cnf file during upgrade PHP 7.2 & PHP 7.3 pool configuration during upgrade WordOps backup directory creation before upgrade EasyEngine database sync during migration fix command \"wo info\" phpmyadmin install with composer command \"wo clean --memcached\" phpredisadmin setup --hsts flag with basic html site hsts flag on site not secure with letsencrypt fix import of previous acme.sh certificate fix proxy webroot folder creation v3.9.4 - 2019-03-15 \u00b6 Added \u00b6 Nginx module nginx_vts Migration script from nginx-ee to nginx-wo Support for Debian 9 (testing) New Nginx build v1.14.2 Changed \u00b6 Update WP-CLI version to 2.1.0 Update Adminer to 4.6.2 Update predis to v1.1.1 Refactored nginx.conf Removed HHVM Stack Removed old linux distro checks Replace wo-acme-sh by acme.sh Fixed \u00b6 Outdated Nginx ssl_ciphers suite Debian 9 nginx build v3.9.3 - 2019-03-07 \u00b6 Changed \u00b6 Updated Nginx fastcgi_cache templates Updated Nginx redis_cache templates Updated Nginx wp-super-cache templates Updated Nginx configuration for WordPress 5.0 remove --experimental args MariaDB version bumped to 10.3 Refactored Changelog Updated WO manual Updated WO bash_completion Refactored README.md Added \u00b6 Add WebP image support with Nginx mapping Add PHP 7.3 support WordPress $skip_cache variable mapping Fixed \u00b6 Nginx variable $webp_suffix on fresh install ( #21 ) wo update command ( #7 ) Fix php services management ( #12 ) Fix WP-CLI install v3.9.2 - 2018-11-30 \u00b6 Changed \u00b6 Re-branded the fork to WordOps Codebase cleanup Set PHP 7.2 as the default Included support for newer OS releases Reworked the HTTPS configuration Added more automated testing with Redis Replaced Postfix with smtp-cli Dropped mail services Dropped w3tc support","title":"Changelog"},{"location":"about/changelog/#changelog","text":"","title":"Changelog"},{"location":"about/changelog/#v396-2019-07-20","text":"","title":"v3.9.6 - 2019-07-20"},{"location":"about/changelog/#added","text":"New Nginx package on Ubuntu with Cloudflare HTTP/2 HPACK and Dynamic TLS records phpMyAdmin upgrade with wo stack upgrade --phpmyadmin Wildcard SSL Certificates support with DNS validation Let's Encrypt DNS API support (Cloudflare, DigitalOcean, etc ..) on domain, subdomain, and wildcard Flag --letsencrypt=clean to purge a previous SSL configuration Support for Debian 10 buster (testing - not ready for production) Fail2ban with custom jails to secure WordPress & SSH Variable keylength in /etc/wo/wo.conf to define letsencrypt certificate keylenght ProFTPd stack with UFW & Fail2ban configurationz Beta branch and command wo update --beta for beta releases Extra directives in wp-config.php (limit posts revisions, set max_memory, enable auto-update for minor-releases)","title":"Added"},{"location":"about/changelog/#fixed","text":"Nginx was not reloaded after enabling HSTS Netdata, Composer & Fail2Ban stack remove and purge WordPress not installed by wo site update with basic php73 sites","title":"Fixed"},{"location":"about/changelog/#v3954-2019-07-13","text":"","title":"v3.9.5.4 - 2019-07-13"},{"location":"about/changelog/#added_1","text":"New Nginx package on Ubuntu with TLS v1.3 support (OpenSSL 1.1.1c) Netdata upgrade with wo stack upgrade --netdata Netdata stack remove/purge","title":"Added"},{"location":"about/changelog/#changed","text":"phpRedisAdmin is now installed with the stack --admin Remove memcached - not required anymore","title":"Changed"},{"location":"about/changelog/#fixed_1","text":"phpRedisAdmin installation Duplicated locations /robots.txt after upgrade to v3.9.5.3 Let's Encrypt stack wo site update --letsencrypt/--letsencrypt=off pt-query-advisor dead link Netdata persistant configuration","title":"Fixed"},{"location":"about/changelog/#v3953-2019-06-18","text":"","title":"v3.9.5.3 - 2019-06-18"},{"location":"about/changelog/#added_2","text":"Argument --preserve with the command wo update to keep current Nginx configuration","title":"Added"},{"location":"about/changelog/#fixed_2","text":"Nginx upgrade failure when running wo update","title":"Fixed"},{"location":"about/changelog/#v3952-2019-06-17","text":"","title":"v3.9.5.2 - 2019-06-17"},{"location":"about/changelog/#added_3","text":"Non-interactive install/upgrade Argument --force with the command wo update Argument - s | --silent to perform non interactive installation","title":"Added"},{"location":"about/changelog/#changed_1","text":"robots.txt location block moved from locations-wo.conf to wpcommon(-php7).php","title":"Changed"},{"location":"about/changelog/#fixed_3","text":"WP_CACHE_KEY_SALT set twice with wpredis WordOps version check when using wo update robots.txt file download if not created PHP-FPM socket path in stub_status.conf : PR #82","title":"Fixed"},{"location":"about/changelog/#v3951-2019-05-10","text":"","title":"v3.9.5.1 - 2019-05-10"},{"location":"about/changelog/#fixed_4","text":"Adminer download link","title":"Fixed"},{"location":"about/changelog/#v395-2019-05-02","text":"","title":"v3.9.5 - 2019-05-02"},{"location":"about/changelog/#added_4","text":"IPv6 support with HTTPS Brotli support in Nginx Let's Encrypt support with --proxy Install script handle migration from EEv3 load-balancing on unix socket for php-fpm stub_status vhost for metrics --letsencrypt=subdomain option opcache optimization for php-fpm EasyEngine configuration backup before migration EasyEngine configuration cleanup after migration WordOps configuration backup before upgrade Previous acme.sh certs migration \"wo maintenance\" command to perform server package update & cleanup Support for Netdata on backend : https://server.hostname:22222/netdata/ New Stacks : composer and netdata additional argument for letsencrypt : --hsts Clean Theme for adminer Credits for tools shipped with WordOps Cache exception for Easy Digital Download Additional cache exceptions for Woocommerce MySQL monitoring with Netdata WordOps-dashboard on 22222, can be installed with wo stack install Extplorer filemanager in WordOps backend Enable OSCP Stapling with Let's Encrypt Compress database backup with pigz (faster than gzip) before updating sites Support for Ubuntu 19.04 (disco) - few php extensions missing Support for Raspbian 9 (stretch) - tested on Raspberry Pi 3b+ backup letsencrypt certificate before upgrade directives emergency_restart_threshold & emergency_restart_interval to restart php-fpm in case of failure EasyEngine cronjob removal during install Kernel tweaks via systctl.conf open_basedir on php-fpm process to forbid access with php outside of /var/www & /run/nginx-cache","title":"Added"},{"location":"about/changelog/#changed_2","text":"letsencrypt stack refactored with acme.sh letsencrypt validation with webroot folder hardened nginx ssl_ecdh_curve Update phpredisadmin Increase MySQL root password size to 24 characters Increase MySQL users password size to 24 characters Nginx locations template is the same for php7.2 & 7.3 backend SSL configuration now stored in /var/www/22222/conf/nginx/ssl.conf Install Netdata with static pre-built binaries instead of having to compile it from source Nginx updated to new stable release (1.16.0) New packages (phpmyadmin, adminer, composer) are not download in /tmp anymore","title":"Changed"},{"location":"about/changelog/#fixed_5","text":"PHP 7.3 extras when php 7.2 isn't installed acme.sh installation acme.sh alias with config home variable deb.sury.org repository gpg key Nginx upgrade from previous WordOps release Force new Nginx templates during update Error message about missing my.cnf file during upgrade PHP 7.2 & PHP 7.3 pool configuration during upgrade WordOps backup directory creation before upgrade EasyEngine database sync during migration fix command \"wo info\" phpmyadmin install with composer command \"wo clean --memcached\" phpredisadmin setup --hsts flag with basic html site hsts flag on site not secure with letsencrypt fix import of previous acme.sh certificate fix proxy webroot folder creation","title":"Fixed"},{"location":"about/changelog/#v394-2019-03-15","text":"","title":"v3.9.4 - 2019-03-15"},{"location":"about/changelog/#added_5","text":"Nginx module nginx_vts Migration script from nginx-ee to nginx-wo Support for Debian 9 (testing) New Nginx build v1.14.2","title":"Added"},{"location":"about/changelog/#changed_3","text":"Update WP-CLI version to 2.1.0 Update Adminer to 4.6.2 Update predis to v1.1.1 Refactored nginx.conf Removed HHVM Stack Removed old linux distro checks Replace wo-acme-sh by acme.sh","title":"Changed"},{"location":"about/changelog/#fixed_6","text":"Outdated Nginx ssl_ciphers suite Debian 9 nginx build","title":"Fixed"},{"location":"about/changelog/#v393-2019-03-07","text":"","title":"v3.9.3 - 2019-03-07"},{"location":"about/changelog/#changed_4","text":"Updated Nginx fastcgi_cache templates Updated Nginx redis_cache templates Updated Nginx wp-super-cache templates Updated Nginx configuration for WordPress 5.0 remove --experimental args MariaDB version bumped to 10.3 Refactored Changelog Updated WO manual Updated WO bash_completion Refactored README.md","title":"Changed"},{"location":"about/changelog/#added_6","text":"Add WebP image support with Nginx mapping Add PHP 7.3 support WordPress $skip_cache variable mapping","title":"Added"},{"location":"about/changelog/#fixed_7","text":"Nginx variable $webp_suffix on fresh install ( #21 ) wo update command ( #7 ) Fix php services management ( #12 ) Fix WP-CLI install","title":"Fixed"},{"location":"about/changelog/#v392-2018-11-30","text":"","title":"v3.9.2 - 2018-11-30"},{"location":"about/changelog/#changed_5","text":"Re-branded the fork to WordOps Codebase cleanup Set PHP 7.2 as the default Included support for newer OS releases Reworked the HTTPS configuration Added more automated testing with Redis Replaced Postfix with smtp-cli Dropped mail services Dropped w3tc support","title":"Changed"},{"location":"about/from-easyengine-to-wordops/","text":"From EasyEngine to WordOps \u00b6 WordOps was forked from EasyEngine v3, with the objective of providing an up-to-date version of EasyEngine v3, stable and ready for production. Fundamental changes \u00b6 We've deprecated the mail stack. As an alternative, you can take a look at Mail-in-a-Box , iRedMail or Caesonia . As Roundcube alternative, there is Rainloop or Afterlogic WebMail Support for w3tc is dropped as a security precaution. PHP 5.6 has been replaced by PHP 7.2 and PHP 7.0 has been replaced by PHP 7.3. Nginx-ee package has been replaced by Nginx-wo (based on Nginx stable v1.16.0 with Brotli support) HHVM stack has been removed Memcached stack has been removed Let's Encrypt stack isn't based on letsencrypt-auto anymore, we use acme.sh to handle SSL certificates If you are going to migrate from EasyEngine v3, here some important informations : Previous php upstreams in Nginx will not be overwritted php5.6 and php7.0 will not be removed or uninstalled Previous Nginx common configurations will not be overwritted","title":"From EasyEngine to WordOps"},{"location":"about/from-easyengine-to-wordops/#from-easyengine-to-wordops","text":"WordOps was forked from EasyEngine v3, with the objective of providing an up-to-date version of EasyEngine v3, stable and ready for production.","title":"From EasyEngine to WordOps"},{"location":"about/from-easyengine-to-wordops/#fundamental-changes","text":"We've deprecated the mail stack. As an alternative, you can take a look at Mail-in-a-Box , iRedMail or Caesonia . As Roundcube alternative, there is Rainloop or Afterlogic WebMail Support for w3tc is dropped as a security precaution. PHP 5.6 has been replaced by PHP 7.2 and PHP 7.0 has been replaced by PHP 7.3. Nginx-ee package has been replaced by Nginx-wo (based on Nginx stable v1.16.0 with Brotli support) HHVM stack has been removed Memcached stack has been removed Let's Encrypt stack isn't based on letsencrypt-auto anymore, we use acme.sh to handle SSL certificates If you are going to migrate from EasyEngine v3, here some important informations : Previous php upstreams in Nginx will not be overwritted php5.6 and php7.0 will not be removed or uninstalled Previous Nginx common configurations will not be overwritted","title":"Fundamental changes"},{"location":"about/give-wordops-github-star/","text":"Give WordOps a Github star \u00b6 Github stars are very important to give more visibility to WordOps, and attract people with skills willing to contribute to it. It's also a source of motivation for us, because that mean people found our work useful. WordOps stable was released only few month ago, but we added several new features since the first release as well as many improvements and bugfixes. To keep this fast release cycle, we will need more users, more suggestions, more bug reports and more contributions. So give WordOps a Github star, by following the link at the top right of this site, if you enjoyed using WordOps.","title":"Give WordOps a Github star"},{"location":"about/give-wordops-github-star/#give-wordops-a-github-star","text":"Github stars are very important to give more visibility to WordOps, and attract people with skills willing to contribute to it. It's also a source of motivation for us, because that mean people found our work useful. WordOps stable was released only few month ago, but we added several new features since the first release as well as many improvements and bugfixes. To keep this fast release cycle, we will need more users, more suggestions, more bug reports and more contributions. So give WordOps a Github star, by following the link at the top right of this site, if you enjoyed using WordOps.","title":"Give WordOps a Github star"},{"location":"about/intro/","text":"","title":"Intro"},{"location":"about/redistributed/","text":"Redistributed Software \u00b6 WordOps redistribute the following third-party software : -","title":"Redistributed Software"},{"location":"about/redistributed/#redistributed-software","text":"WordOps redistribute the following third-party software : -","title":"Redistributed Software"},{"location":"about/what-is-wordops/","text":"","title":"What is wordops"},{"location":"commands/clean/","text":"clean \u00b6 Clean NGINX FastCGI cache, Opcache, Redis Cache Usage : wo clean [ options ] If options are empty, default is --fastcgi . optional arguments description --fastcgi clean Nginx fastcgi_cache --redis clean redis cache --opcache clean opcache --all clean all cache","title":"clean"},{"location":"commands/clean/#clean","text":"Clean NGINX FastCGI cache, Opcache, Redis Cache Usage : wo clean [ options ] If options are empty, default is --fastcgi . optional arguments description --fastcgi clean Nginx fastcgi_cache --redis clean redis cache --opcache clean opcache --all clean all cache","title":"clean"},{"location":"commands/debug/","text":"debug \u00b6 Used for server level debugging Usage : wo debug [ options ]","title":"debug"},{"location":"commands/debug/#debug","text":"Used for server level debugging Usage : wo debug [ options ]","title":"debug"},{"location":"commands/info/","text":"info \u00b6 Display configuration information related to Nginx, PHP and MySQL Usage : wo info [ options ] optional arguments description --nginx Get Nginx configuration information --php Get PHP 7.2 configuration information --php73 Get PHP 7.3 configuration information --mysql Get MySQL configuration information","title":"info"},{"location":"commands/info/#info","text":"Display configuration information related to Nginx, PHP and MySQL Usage : wo info [ options ] optional arguments description --nginx Get Nginx configuration information --php Get PHP 7.2 configuration information --php73 Get PHP 7.3 configuration information --mysql Get MySQL configuration information","title":"info"},{"location":"commands/log/","text":"log \u00b6 Perform operations on Nginx, PHP and MySQL log files Usage : wo log [ <site_name> ] [ options ] subcommand description gzip GZip Nginx, PHP, MySQL log file mail Mail Nginx, PHP, MySQL log file show Show Nginx, PHP, MySQL log file reset Reset Nginx, PHP, MySQL log file log show \u00b6 Show Nginx, PHP, MySQL log file Usage : wo log show [ <site_name> ] [ options ] </site_name> optional arguments description --nginx Show Nginx Error logs file --php Show PHP Error logs file --mysql Show MySQL logs file --wp Show Site specific WordPress logs file","title":"log"},{"location":"commands/log/#log","text":"Perform operations on Nginx, PHP and MySQL log files Usage : wo log [ <site_name> ] [ options ] subcommand description gzip GZip Nginx, PHP, MySQL log file mail Mail Nginx, PHP, MySQL log file show Show Nginx, PHP, MySQL log file reset Reset Nginx, PHP, MySQL log file","title":"log"},{"location":"commands/log/#log-show","text":"Show Nginx, PHP, MySQL log file Usage : wo log show [ <site_name> ] [ options ] </site_name> optional arguments description --nginx Show Nginx Error logs file --php Show PHP Error logs file --mysql Show MySQL logs file --wp Show Site specific WordPress logs file","title":"log show"},{"location":"commands/maintenance/","text":"maintenance \u00b6 Update apt-cache and upgrade packages. Usage : wo maintenance This command is equivalent to : apt update apt dist-upgrade apt autoremove --purge apt autoclean Package update is performed in a non-interactive way, with the \"--force-confold\" policy, to never overwrite packages configurations.","title":"maintenance"},{"location":"commands/maintenance/#maintenance","text":"Update apt-cache and upgrade packages. Usage : wo maintenance This command is equivalent to : apt update apt dist-upgrade apt autoremove --purge apt autoclean Package update is performed in a non-interactive way, with the \"--force-confold\" policy, to never overwrite packages configurations.","title":"maintenance"},{"location":"commands/secure/","text":"Secure \u00b6 Secure command secure WordOps backend auth, ip and port Usage : wo secure [ options ] Options : argument description --auth Set backend user credentials (user and) --port Set backend port (default : 22222) --ip Set the list of IP(s) allowed to access without authentification WordOps uses Basic Auth to protect the backend from unauthorize people. To change the authorization method, backend's port,... You can use wo secure command. Change backend credential \u00b6 The user name and password of WordOps backend is showed when you create a first site. If you don't remember and want to reset, please use below command. wo secure --auth Provide HTTP authentication user name [ admin ] :master Provide HTTP authentication password [ 5zVFELjHjShPPFr7qkoMzavP ] : Short hand: wo secure --auth YourUsername aSecurePassword Change backend port \u00b6 In case you want to change WordOps backend port from 22222 , use this command: wo secure --port WordOps admin port [ 22222 ] :23456 Reload : nginx [ OK ] Successfully port changed 23456 Change whitelist IPs \u00b6 By default , WordOps only allow IP 127 . 0 . 0 . 1 to connect to their backend. To allow your IP (ex. 1 . 1 . 1 . 1 ), use below command: wo secure --ip Enter the comma separated IP addresses to white list [ 127 .0.0.1 ] :1.1.1.1 Successfully added IP address in acl.conf file You can also edit directly the file / etc / nginx / common / acl . conf","title":"secure"},{"location":"commands/secure/#secure","text":"Secure command secure WordOps backend auth, ip and port Usage : wo secure [ options ] Options : argument description --auth Set backend user credentials (user and) --port Set backend port (default : 22222) --ip Set the list of IP(s) allowed to access without authentification WordOps uses Basic Auth to protect the backend from unauthorize people. To change the authorization method, backend's port,... You can use wo secure command.","title":"Secure"},{"location":"commands/secure/#change-backend-credential","text":"The user name and password of WordOps backend is showed when you create a first site. If you don't remember and want to reset, please use below command. wo secure --auth Provide HTTP authentication user name [ admin ] :master Provide HTTP authentication password [ 5zVFELjHjShPPFr7qkoMzavP ] : Short hand: wo secure --auth YourUsername aSecurePassword","title":"Change backend credential"},{"location":"commands/secure/#change-backend-port","text":"In case you want to change WordOps backend port from 22222 , use this command: wo secure --port WordOps admin port [ 22222 ] :23456 Reload : nginx [ OK ] Successfully port changed 23456","title":"Change backend port"},{"location":"commands/secure/#change-whitelist-ips","text":"By default , WordOps only allow IP 127 . 0 . 0 . 1 to connect to their backend. To allow your IP (ex. 1 . 1 . 1 . 1 ), use below command: wo secure --ip Enter the comma separated IP addresses to white list [ 127 .0.0.1 ] :1.1.1.1 Successfully added IP address in acl.conf file You can also edit directly the file / etc / nginx / common / acl . conf","title":"Change whitelist IPs"},{"location":"commands/site/","text":"site \u00b6 Performs website specific operations Usage : wo site ( command ) [ options ] subcommand description create Create site with WordOps update Update site type or configuration show Show site Nginx configuration edit Edit site Nginx configuration delete Delete site list list all sites enable Enable site in Nginx disable Disable site in Nginx cd Move into site webroot directory site create \u00b6 Usage \u00b6 wo site create [ <site_name> ] [ options ] Basic sites \u00b6 HTML site \u00b6 To create simple html website use this command. wo site create site.tld --html PHP site \u00b6 To create simple php website with no database use this command. wo site create site.tld --php PHP+MySQL site \u00b6 To create simple php website with database use this command. wo site create site.tld --mysql NOTE: You can find MySQL database details in / var / www / site . tld / wo - config . php . Proxy site \u00b6 To create site with Proxy configuration you can use --proxy during site creation wo site create site.tld --proxy = 127 .0.0.1:3000 This will create proxy site site.tld with proxy destination as 127.0.0.1:3000. Port is optional. Default port : 80. WordPress \u00b6 Following are the WordPress website types you can create website based on Cache Mechanism Standard sites \u00b6 cache PHP example no cache PHP 7.2 wo site create site . tld --wp no cache PHP 7.3 wo site create site . tld --wp --php73 fastcgi_cache PHP 7.2 wo site create site . tld --wpfc fastcgi_cache PHP 7.3 wo site create site . tld --wpfc --php73 wp-super-cache PHP 7.2 wo site create site . tld --wpsc wp-super-cache PHP 7.3 wo site create site . tld --wpsc --php73 redis-cache PHP 7.2 wo site create site . tld --wpredis redis-cache PHP 7.3 wo site create site . tld --wpredis --php73 Multisite subdirectory \u00b6 cache PHP example no cache PHP 7.2 wo site create site . tld --wpsubdir no cache PHP 7.3 wo site create site . tld --wpsubdir --php73 fastcgi_cache PHP 7.2 wo site create site . tld --wpsubdir --wpfc fastcgi_cache PHP 7.3 wo site create site . tld --wpsubdir --wpfc --php73 wp-super-cache PHP 7.2 wo site create site . tld --wpsubdir --wpsc wp-super-cache PHP 7.3 wo site create site . tld --wpsubdir --wpsc --php73 redis-cache PHP 7.2 wo site create site . tld --wpsubdir --wpredis redis-cache PHP 7.3 wo site create site . tld --wpsubdir --wpredis --php73 Multisite subdomain \u00b6 cache PHP example no cache PHP 7.2 wo site create site . tld --wpsubdom no cache PHP 7.3 wo site create site . tld --wpsubdom --php73 fastcgi_cache PHP 7.2 wo site create site . tld --wpsubdir --wpfc fastcgi_cache PHP 7.3 wo site create site . tld --wpsubdom --wpfc --php73 wp-super-cache PHP 7.2 wo site create site . tld --wpsubdom --wpsc wp-super-cache PHP 7.3 wo site create site . tld --wpsubdom --wpsc --php73 redis-cache PHP 7.2 wo site create site . tld --wpsubdom --wpredis redis-cache PHP 7.3 wo site create site . tld --wpsubdom --wpredis --php73 Cheatsheet \u00b6 Cache single site multisite w/ subdir multisite w/ subdom NO Cache --wp --wpsubdir --wpsubdomain WP Super Cache --wpsc -wpsubdir --wpsc --wpsubdomain --wpsc Nginx fastcgi_cache --wpfc --wpsubdir --wpfc --wpsubdomain --wpfc Redis cache --wpredis --wpsubdir --wpredis --wpsubdomain --wpredis Extra settings \u00b6 Define WordPress administrator user To define wordpress administrator user during site creation use wo site create site.tld --user = admin This will create admin as administrator user in wordpress during installation. If not defined it will take git user name. Define WordPress administrator password To define wordpress administrator password during site creation use wo site create site.tld --pass = password This will set defined password as administrator password. If not defined it will generate random pasword for administrator. If you have special characters, you can quote them using single quotes like this : --pass='my$secret&' Define WordPress administrator email To define wordpress administrator email during site creation use wo site create site.tld --email = wo@site.tld This will set defined email as administrator email. If not defined it will set git email as administrator email. Additional features \u00b6 Let's Encrypt \u00b6 WordOps supports Let's Encrypt out of the box. Domain \u00b6 wo site create site.tld --wp --letsencrypt This command will issue a certificate for site.tld + www.site.tld . Subdomain \u00b6 You can also issue Let's Encrypt certificates with subdomains. wo site create sub.site.tld --wp --letsencrypt = subdomain Wildcard \u00b6 Since the release v3.9.6 , WordOps supports Let's Encrypt Wildcard SSL certificates with DNS API validation. Before issuing a wildcard certificate, it require to define the DNS API crendentials for acme.sh. Example with Cloudflare DNS : export CF_Key = \"sdfsdfsdfljlbjkljlkjsdfoiwje\" export CF_Email = \"xxxx@sss.com\" Info More example in our guide about DNS API configuration After you define those variables with the command export , you can issue your certificate with wo site create site.tld --wp --letsencrypt = wildcard --dns = dns_cf --dns=dns_cf can be replaced with another DNS provider supported by acme.sh. For DigitalOcean, it would be --dns=dns_do HSTS \u00b6 Additionally you can enable HSTS on your site by adding the flag --hsts with --letsencrypt wo site create site.tld --wp --letsencrypt --hsts PHP 7.3 \u00b6 To create site with PHP 7.3 you can use --php73 during site creation For example, you can create WordPress site running on PHP 7.3 using following command: wo site create site.tld --wp --php73 To create simple php site running with PHP 7.3 with no database, you can use this command : wo site create site.tld --php73 site update \u00b6 Update site configuration Pre-update policy \u00b6 wo site update command follows following procedure while updating current site. Before Updating any site : Creates nginx configuration backup for site. Moves htdocs to backup while updating html/php/mysql site. Creates database dump in backup. While updating current mysql site WordOps uses same database for installing wordpress tables. All these backup are stored outside htdocs, in backup directory. Example : updating site from basic wp to wp + fastcgi_cache : Usage \u00b6 Usage : wo site update [ <site_name> ] [ options ] options description --html update to html site --php update to php site --mysql update to MySQL + PHP site --php73 update site to PHP 7.3 --php73=off disable PHP 7.3 --wp update site to WordPress without cache --wpfc update site to WordPress with fastcgi_cache --wpsc update site to WordPress with wp-super-cache --wpredis update site to WordPress with redis-cache --wpsubdir update site to WordPress multisite on subdirectories --wpsubdomain update site to WordPress multisite on subdomains --password update admin password for a WordPress site --letsencrypt , - le secure site with Let's Encrypt SSL certificate --letsencrypt=subdomain secure site running on a subdomain with Let's Encrypt --letsencrypt=wildcard secure site/multisite with a wildcard SSL certificates --letsencrypt=off disable Let's Encrypt SSL certificate --dns , --dns=<dns api provider> issue Let's Encrypt certificate with DNS validation. default : dns_cf --hsts Enable HSTS on site secured with Let's Encrypt --hsts=off Disable HSTS Examples \u00b6 Update a WordPress site without cache ( --wp ), to WordPress with Nginx fastcgi_cache wo site update site.tld --wpfc Update a WordPress site running with PHP 7.2 to PHP 7.3 wo site update site.tld --php73 Disable PHP 7.3 and use PHP 7.2 : wo site update site.tld --php73 = off Update a WordPress site wiht Nginx fastcgi_cache to WordPress with redis-cache wo site update site.tld --wpredis site info \u00b6 Get site information including cache backend, PHP version or user database credentials Usage : wo site info [ <site_name> ] site delete \u00b6 Delete site including webroot and database : Usage : wo site delete [ <site_name> ] [ options ] options description --no-prompt delete website without confirmation prompt --files delete only website files --db delete only database site edit \u00b6 Edit site Nginx configuration Usage : wo site edit [ <site_name> ] You will be prompted to choose the text editor you prefer. Nano is highly recommended for beginners. site cd \u00b6 Move into a site webroot directory Usage : wo site cd [ <site_name> ] site list \u00b6 List all sites managed with WordOps Usage : wo site list site show \u00b6 Display site Nginx configuration Usage : wo site show [ <site_name> ] site disable \u00b6 Disable site Nginx vhost Usage : wo site disable [ <site_name> ] site enable \u00b6 Enable site Nginx vhost Usage : wo site enable [ <site_name> ]","title":"site"},{"location":"commands/site/#site","text":"Performs website specific operations Usage : wo site ( command ) [ options ] subcommand description create Create site with WordOps update Update site type or configuration show Show site Nginx configuration edit Edit site Nginx configuration delete Delete site list list all sites enable Enable site in Nginx disable Disable site in Nginx cd Move into site webroot directory","title":"site"},{"location":"commands/site/#site-create","text":"","title":"site create"},{"location":"commands/site/#usage","text":"wo site create [ <site_name> ] [ options ]","title":"Usage"},{"location":"commands/site/#basic-sites","text":"","title":"Basic sites"},{"location":"commands/site/#html-site","text":"To create simple html website use this command. wo site create site.tld --html","title":"HTML site"},{"location":"commands/site/#php-site","text":"To create simple php website with no database use this command. wo site create site.tld --php","title":"PHP site"},{"location":"commands/site/#phpmysql-site","text":"To create simple php website with database use this command. wo site create site.tld --mysql NOTE: You can find MySQL database details in / var / www / site . tld / wo - config . php .","title":"PHP+MySQL site"},{"location":"commands/site/#proxy-site","text":"To create site with Proxy configuration you can use --proxy during site creation wo site create site.tld --proxy = 127 .0.0.1:3000 This will create proxy site site.tld with proxy destination as 127.0.0.1:3000. Port is optional. Default port : 80.","title":"Proxy site"},{"location":"commands/site/#wordpress","text":"Following are the WordPress website types you can create website based on Cache Mechanism","title":"WordPress"},{"location":"commands/site/#standard-sites","text":"cache PHP example no cache PHP 7.2 wo site create site . tld --wp no cache PHP 7.3 wo site create site . tld --wp --php73 fastcgi_cache PHP 7.2 wo site create site . tld --wpfc fastcgi_cache PHP 7.3 wo site create site . tld --wpfc --php73 wp-super-cache PHP 7.2 wo site create site . tld --wpsc wp-super-cache PHP 7.3 wo site create site . tld --wpsc --php73 redis-cache PHP 7.2 wo site create site . tld --wpredis redis-cache PHP 7.3 wo site create site . tld --wpredis --php73","title":"Standard sites"},{"location":"commands/site/#multisite-subdirectory","text":"cache PHP example no cache PHP 7.2 wo site create site . tld --wpsubdir no cache PHP 7.3 wo site create site . tld --wpsubdir --php73 fastcgi_cache PHP 7.2 wo site create site . tld --wpsubdir --wpfc fastcgi_cache PHP 7.3 wo site create site . tld --wpsubdir --wpfc --php73 wp-super-cache PHP 7.2 wo site create site . tld --wpsubdir --wpsc wp-super-cache PHP 7.3 wo site create site . tld --wpsubdir --wpsc --php73 redis-cache PHP 7.2 wo site create site . tld --wpsubdir --wpredis redis-cache PHP 7.3 wo site create site . tld --wpsubdir --wpredis --php73","title":"Multisite subdirectory"},{"location":"commands/site/#multisite-subdomain","text":"cache PHP example no cache PHP 7.2 wo site create site . tld --wpsubdom no cache PHP 7.3 wo site create site . tld --wpsubdom --php73 fastcgi_cache PHP 7.2 wo site create site . tld --wpsubdir --wpfc fastcgi_cache PHP 7.3 wo site create site . tld --wpsubdom --wpfc --php73 wp-super-cache PHP 7.2 wo site create site . tld --wpsubdom --wpsc wp-super-cache PHP 7.3 wo site create site . tld --wpsubdom --wpsc --php73 redis-cache PHP 7.2 wo site create site . tld --wpsubdom --wpredis redis-cache PHP 7.3 wo site create site . tld --wpsubdom --wpredis --php73","title":"Multisite subdomain"},{"location":"commands/site/#cheatsheet","text":"Cache single site multisite w/ subdir multisite w/ subdom NO Cache --wp --wpsubdir --wpsubdomain WP Super Cache --wpsc -wpsubdir --wpsc --wpsubdomain --wpsc Nginx fastcgi_cache --wpfc --wpsubdir --wpfc --wpsubdomain --wpfc Redis cache --wpredis --wpsubdir --wpredis --wpsubdomain --wpredis","title":"Cheatsheet"},{"location":"commands/site/#extra-settings","text":"Define WordPress administrator user To define wordpress administrator user during site creation use wo site create site.tld --user = admin This will create admin as administrator user in wordpress during installation. If not defined it will take git user name. Define WordPress administrator password To define wordpress administrator password during site creation use wo site create site.tld --pass = password This will set defined password as administrator password. If not defined it will generate random pasword for administrator. If you have special characters, you can quote them using single quotes like this : --pass='my$secret&' Define WordPress administrator email To define wordpress administrator email during site creation use wo site create site.tld --email = wo@site.tld This will set defined email as administrator email. If not defined it will set git email as administrator email.","title":"Extra settings"},{"location":"commands/site/#additional-features","text":"","title":"Additional features"},{"location":"commands/site/#lets-encrypt","text":"WordOps supports Let's Encrypt out of the box.","title":"Let's Encrypt"},{"location":"commands/site/#domain","text":"wo site create site.tld --wp --letsencrypt This command will issue a certificate for site.tld + www.site.tld .","title":"Domain"},{"location":"commands/site/#subdomain","text":"You can also issue Let's Encrypt certificates with subdomains. wo site create sub.site.tld --wp --letsencrypt = subdomain","title":"Subdomain"},{"location":"commands/site/#wildcard","text":"Since the release v3.9.6 , WordOps supports Let's Encrypt Wildcard SSL certificates with DNS API validation. Before issuing a wildcard certificate, it require to define the DNS API crendentials for acme.sh. Example with Cloudflare DNS : export CF_Key = \"sdfsdfsdfljlbjkljlkjsdfoiwje\" export CF_Email = \"xxxx@sss.com\" Info More example in our guide about DNS API configuration After you define those variables with the command export , you can issue your certificate with wo site create site.tld --wp --letsencrypt = wildcard --dns = dns_cf --dns=dns_cf can be replaced with another DNS provider supported by acme.sh. For DigitalOcean, it would be --dns=dns_do","title":"Wildcard"},{"location":"commands/site/#hsts","text":"Additionally you can enable HSTS on your site by adding the flag --hsts with --letsencrypt wo site create site.tld --wp --letsencrypt --hsts","title":"HSTS"},{"location":"commands/site/#php-73","text":"To create site with PHP 7.3 you can use --php73 during site creation For example, you can create WordPress site running on PHP 7.3 using following command: wo site create site.tld --wp --php73 To create simple php site running with PHP 7.3 with no database, you can use this command : wo site create site.tld --php73","title":"PHP 7.3"},{"location":"commands/site/#site-update","text":"Update site configuration","title":"site update"},{"location":"commands/site/#pre-update-policy","text":"wo site update command follows following procedure while updating current site. Before Updating any site : Creates nginx configuration backup for site. Moves htdocs to backup while updating html/php/mysql site. Creates database dump in backup. While updating current mysql site WordOps uses same database for installing wordpress tables. All these backup are stored outside htdocs, in backup directory. Example : updating site from basic wp to wp + fastcgi_cache :","title":"Pre-update policy"},{"location":"commands/site/#usage_1","text":"Usage : wo site update [ <site_name> ] [ options ] options description --html update to html site --php update to php site --mysql update to MySQL + PHP site --php73 update site to PHP 7.3 --php73=off disable PHP 7.3 --wp update site to WordPress without cache --wpfc update site to WordPress with fastcgi_cache --wpsc update site to WordPress with wp-super-cache --wpredis update site to WordPress with redis-cache --wpsubdir update site to WordPress multisite on subdirectories --wpsubdomain update site to WordPress multisite on subdomains --password update admin password for a WordPress site --letsencrypt , - le secure site with Let's Encrypt SSL certificate --letsencrypt=subdomain secure site running on a subdomain with Let's Encrypt --letsencrypt=wildcard secure site/multisite with a wildcard SSL certificates --letsencrypt=off disable Let's Encrypt SSL certificate --dns , --dns=<dns api provider> issue Let's Encrypt certificate with DNS validation. default : dns_cf --hsts Enable HSTS on site secured with Let's Encrypt --hsts=off Disable HSTS","title":"Usage"},{"location":"commands/site/#examples","text":"Update a WordPress site without cache ( --wp ), to WordPress with Nginx fastcgi_cache wo site update site.tld --wpfc Update a WordPress site running with PHP 7.2 to PHP 7.3 wo site update site.tld --php73 Disable PHP 7.3 and use PHP 7.2 : wo site update site.tld --php73 = off Update a WordPress site wiht Nginx fastcgi_cache to WordPress with redis-cache wo site update site.tld --wpredis","title":"Examples"},{"location":"commands/site/#site-info","text":"Get site information including cache backend, PHP version or user database credentials Usage : wo site info [ <site_name> ]","title":"site info"},{"location":"commands/site/#site-delete","text":"Delete site including webroot and database : Usage : wo site delete [ <site_name> ] [ options ] options description --no-prompt delete website without confirmation prompt --files delete only website files --db delete only database","title":"site delete"},{"location":"commands/site/#site-edit","text":"Edit site Nginx configuration Usage : wo site edit [ <site_name> ] You will be prompted to choose the text editor you prefer. Nano is highly recommended for beginners.","title":"site edit"},{"location":"commands/site/#site-cd","text":"Move into a site webroot directory Usage : wo site cd [ <site_name> ]","title":"site cd"},{"location":"commands/site/#site-list","text":"List all sites managed with WordOps Usage : wo site list","title":"site list"},{"location":"commands/site/#site-show","text":"Display site Nginx configuration Usage : wo site show [ <site_name> ]","title":"site show"},{"location":"commands/site/#site-disable","text":"Disable site Nginx vhost Usage : wo site disable [ <site_name> ]","title":"site disable"},{"location":"commands/site/#site-enable","text":"Enable site Nginx vhost Usage : wo site enable [ <site_name> ]","title":"site enable"},{"location":"commands/stack/","text":"stack \u00b6 Manage server stack operations Usage : wo stack ( command ) [ options ] subcommand description install Install packages reload Reload WordOps stack remove Uninstall packages purge Uninstall & purge packages restart Restart WordOps stack stop Stop WordOps stack upgrade Upgrade WordOps stack start Start WordOps stack stack install \u00b6 Usage : wo stack install [ options ] Recommended install \u00b6 wo stack install This will install the --web stack and --admin stack. Nginx, PHP 7.2, MariaDB, Netdata, WordOps dashboard, phpMyAdmin, Adminer, MySQLtuner, OpcacheGUI Web \u00b6 wo stack install --web This will install Nginx, PHP 7.2, MariaDB Admin tools \u00b6 WordOps backend with WordOps-Dashboard, PHPmyAdmin, Adminer, OpcacheGUI etc.. wo stack install --admin Individual packages \u00b6 Nginx \u00b6 wo stack install --nginx PHP 7.2 \u00b6 wo stack install --php MariaDB (MySQL) \u00b6 wo stack install --mysql Adminer \u00b6 wo stack install --adminer PHPMyAdmin \u00b6 wo stack install --phpmyadmin Netdata \u00b6 wo stack install --netdata WordOps dashboard \u00b6 Warning It's highly recommended to use wo stack install to install WordOps dashboard and all related tools wo stack install --dashboard stack upgrade \u00b6 Upgrade stack safely Usage : wo stack upgrade [ options ] Options \u00b6 Nginx \u00b6 Upgrade Nginx wo stack upgrade --nginx","title":"stack"},{"location":"commands/stack/#stack","text":"Manage server stack operations Usage : wo stack ( command ) [ options ] subcommand description install Install packages reload Reload WordOps stack remove Uninstall packages purge Uninstall & purge packages restart Restart WordOps stack stop Stop WordOps stack upgrade Upgrade WordOps stack start Start WordOps stack","title":"stack"},{"location":"commands/stack/#stack-install","text":"Usage : wo stack install [ options ]","title":"stack install"},{"location":"commands/stack/#recommended-install","text":"wo stack install This will install the --web stack and --admin stack. Nginx, PHP 7.2, MariaDB, Netdata, WordOps dashboard, phpMyAdmin, Adminer, MySQLtuner, OpcacheGUI","title":"Recommended install"},{"location":"commands/stack/#web","text":"wo stack install --web This will install Nginx, PHP 7.2, MariaDB","title":"Web"},{"location":"commands/stack/#admin-tools","text":"WordOps backend with WordOps-Dashboard, PHPmyAdmin, Adminer, OpcacheGUI etc.. wo stack install --admin","title":"Admin tools"},{"location":"commands/stack/#individual-packages","text":"","title":"Individual packages"},{"location":"commands/stack/#nginx","text":"wo stack install --nginx","title":"Nginx"},{"location":"commands/stack/#php-72","text":"wo stack install --php","title":"PHP 7.2"},{"location":"commands/stack/#mariadb-mysql","text":"wo stack install --mysql","title":"MariaDB (MySQL)"},{"location":"commands/stack/#adminer","text":"wo stack install --adminer","title":"Adminer"},{"location":"commands/stack/#phpmyadmin","text":"wo stack install --phpmyadmin","title":"PHPMyAdmin"},{"location":"commands/stack/#netdata","text":"wo stack install --netdata","title":"Netdata"},{"location":"commands/stack/#wordops-dashboard","text":"Warning It's highly recommended to use wo stack install to install WordOps dashboard and all related tools wo stack install --dashboard","title":"WordOps dashboard"},{"location":"commands/stack/#stack-upgrade","text":"Upgrade stack safely Usage : wo stack upgrade [ options ]","title":"stack upgrade"},{"location":"commands/stack/#options","text":"","title":"Options"},{"location":"commands/stack/#nginx_1","text":"Upgrade Nginx wo stack upgrade --nginx","title":"Nginx"},{"location":"commands/update/","text":"update \u00b6 Update WordOps to the latest release available Usage : wo update [ options ] Without argument, the command wo update will update WordOps only if a newer version is available. optional arguments description --force Force WordOps update to the last release --preserve Do not overwrite Nginx configurations during update","title":"update"},{"location":"commands/update/#update","text":"Update WordOps to the latest release available Usage : wo update [ options ] Without argument, the command wo update will update WordOps only if a newer version is available. optional arguments description --force Force WordOps update to the last release --preserve Do not overwrite Nginx configurations during update","title":"update"},{"location":"getting-started/creating-sites/","text":"Creating site \u00b6 You can create site with WordOps by using the command wo site create . WordOps will always : install required stack if needed configure Nginx vhost create site directory WordOps can also : create the site database install WordPress (with or without caching) secure site with Let's Encrypt SSL certificate You can see all the options available to create site in the command list site create Additional informations \u00b6 Component Path Site files / var / www / site . tld / htdocs wp-config.php / var / www / site . tld / wp - config . php Additional Nginx conf / var / www / site . tld / conf / nginx / Site access/error logs / var / www / site . tld / logs Examples \u00b6 Basic site \u00b6 Basic html site wo site create site.tld --html Simple PHP site wo site create site.tld --php Simple PHP + MySQL site wo site create site.tld --mysql WordPress site \u00b6 Simple WordPress site wo site create site.tld --wp WordPress site with Nginx fastcgi_cache wo site create site.tld --wpfc WordPress site with Redis cache wo site create site.tld --wpredis PHP 7.3 \u00b6 Simple PHP 7.3 + MySQL site wo site create site.tld --mysql --php73 Simple PHP 7.3 site wo site create site.tld --php73 Simple WordPress site with PHP 7.3 wo site create site.tld --wp --php73 Let's Encrypt \u00b6 WordPress site secured with Let's Encrypt wo site create site.tld --wp --letsencrypt WordPress site on subdomain secure with Let's Encrypt wo site create sub.site.tld --wp --letsencrypt = subdomain WordPress site with PHP 7.3 and secured by Let's Encrypt wo site create site.tld --wp --php73 --letsencrypt Create WordPress subdomain multisite secured with a Let's Encrypt Wildcard SSL certificate Info More informations about wildcard SSL certificates our guide about DNS API configuration wo site create site.tld --wpsubdomain --letsencrypt = wildcard --dns = dns_cf","title":"Creating sites"},{"location":"getting-started/creating-sites/#creating-site","text":"You can create site with WordOps by using the command wo site create . WordOps will always : install required stack if needed configure Nginx vhost create site directory WordOps can also : create the site database install WordPress (with or without caching) secure site with Let's Encrypt SSL certificate You can see all the options available to create site in the command list site create","title":"Creating site"},{"location":"getting-started/creating-sites/#additional-informations","text":"Component Path Site files / var / www / site . tld / htdocs wp-config.php / var / www / site . tld / wp - config . php Additional Nginx conf / var / www / site . tld / conf / nginx / Site access/error logs / var / www / site . tld / logs","title":"Additional informations"},{"location":"getting-started/creating-sites/#examples","text":"","title":"Examples"},{"location":"getting-started/creating-sites/#basic-site","text":"Basic html site wo site create site.tld --html Simple PHP site wo site create site.tld --php Simple PHP + MySQL site wo site create site.tld --mysql","title":"Basic site"},{"location":"getting-started/creating-sites/#wordpress-site","text":"Simple WordPress site wo site create site.tld --wp WordPress site with Nginx fastcgi_cache wo site create site.tld --wpfc WordPress site with Redis cache wo site create site.tld --wpredis","title":"WordPress site"},{"location":"getting-started/creating-sites/#php-73","text":"Simple PHP 7.3 + MySQL site wo site create site.tld --mysql --php73 Simple PHP 7.3 site wo site create site.tld --php73 Simple WordPress site with PHP 7.3 wo site create site.tld --wp --php73","title":"PHP 7.3"},{"location":"getting-started/creating-sites/#lets-encrypt","text":"WordPress site secured with Let's Encrypt wo site create site.tld --wp --letsencrypt WordPress site on subdomain secure with Let's Encrypt wo site create sub.site.tld --wp --letsencrypt = subdomain WordPress site with PHP 7.3 and secured by Let's Encrypt wo site create site.tld --wp --php73 --letsencrypt Create WordPress subdomain multisite secured with a Let's Encrypt Wildcard SSL certificate Info More informations about wildcard SSL certificates our guide about DNS API configuration wo site create site.tld --wpsubdomain --letsencrypt = wildcard --dns = dns_cf","title":"Let's Encrypt"},{"location":"getting-started/installation-guide/","text":"Installation \u00b6 One-Step Automated Install \u00b6 We provide an installer script which install the required dependencies, before setting-up WordOps. It can be installed with the following command : wget -qO wo wops.cc && sudo bash wo Alternative : Clone Github repository and run \u00b6 git clone https://github.com/WordOps/WordOps.git cd WordOps/ sudo bash install !!! info \"Information\" During the installation, you will be prompt for an username and an email address. WordOps need those informations to configure Git version control and to use it for saving server configurations. Your informations will only be stored in the file .gitconfig. Manual Installation \u00b6 If you prefer to perform yourself the same steps than our installer script, here how to install WordOps manually. Install WordOps dependencies \u00b6 # On Ubuntu apt-get install build-essential bash-completion curl gzip python3 \\ python3-apt python3-setuptools python3-dev sqlite3 git tar \\ software-properties-common pigz gnupg2 cron ccze rsync -y # On Debian apt-get install build-essential bash-completion curl gzip dirmngr \\ sudo python3 python3-apt python3-setuptools python3-dev \\ ca-certificates sqlite3 git tar software-properties-common \\ pigz apt-transport-https gnupg2 cron ccze rsync -y Clone the github repository \u00b6 git clone https://github.com/WordOps/WordOps.git create log directory mkdir -p /var/log/wo Install WordOps \u00b6 cd WordOps/ python3 setup.py install Create WordOps db \u00b6 mkdir -p /var/lib/wo # Create an empty database for WordOps echo \"CREATE TABLE sites ( id INTEGER PRIMARY KEY AUTOINCREMENT, sitename UNIQUE, site_type CHAR, cache_type CHAR, site_path CHAR, created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP, is_enabled INT, is_ssl INT, storage_fs CHAR, storage_db CHAR, db_name VARCHAR, db_user VARCHAR, db_password VARCHAR, db_host VARCHAR, is_hhvm INT INT DEFAULT '0', php_version VARCHAR );\" | sqlite3 /var/lib/wo/dbase.db # secure the db chown -R root:root /var/lib/wo # Only allow access by root, block others chmod -R 600 /var/lib/wo Install acme.sh \u00b6 # clone the repository git clone <https://github.com/Neilpang/acme.sh.git> /opt/acme.sh -q # create conf directory mkdir -p /etc/letsencrypt/ { config,live,renewal } # install acme.sh cd /opt/acme.sh ./acme.sh --install \\ --home /etc/letsencrypt \\ --config-home /etc/letsencrypt/config \\ --cert-home /etc/letsencrypt/renewal # create .well-known directory mkdir -p /var/www/html/.well-known/acme-challenge # set www-data as owner chown -R www-data:www-data /var/www/html /var/www/html/.well-known # set permissions chmod 750 /var/www/html /var/www/html/.well-known Install WP-CLI \u00b6 wget -qO /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar chmod +x /usr/local/bin/wp","title":"Installation"},{"location":"getting-started/installation-guide/#installation","text":"","title":"Installation"},{"location":"getting-started/installation-guide/#one-step-automated-install","text":"We provide an installer script which install the required dependencies, before setting-up WordOps. It can be installed with the following command : wget -qO wo wops.cc && sudo bash wo","title":"One-Step Automated Install"},{"location":"getting-started/installation-guide/#alternative-clone-github-repository-and-run","text":"git clone https://github.com/WordOps/WordOps.git cd WordOps/ sudo bash install !!! info \"Information\" During the installation, you will be prompt for an username and an email address. WordOps need those informations to configure Git version control and to use it for saving server configurations. Your informations will only be stored in the file .gitconfig.","title":"Alternative : Clone Github repository and run"},{"location":"getting-started/installation-guide/#manual-installation","text":"If you prefer to perform yourself the same steps than our installer script, here how to install WordOps manually.","title":"Manual Installation"},{"location":"getting-started/installation-guide/#install-wordops-dependencies","text":"# On Ubuntu apt-get install build-essential bash-completion curl gzip python3 \\ python3-apt python3-setuptools python3-dev sqlite3 git tar \\ software-properties-common pigz gnupg2 cron ccze rsync -y # On Debian apt-get install build-essential bash-completion curl gzip dirmngr \\ sudo python3 python3-apt python3-setuptools python3-dev \\ ca-certificates sqlite3 git tar software-properties-common \\ pigz apt-transport-https gnupg2 cron ccze rsync -y","title":"Install WordOps dependencies"},{"location":"getting-started/installation-guide/#clone-the-github-repository","text":"git clone https://github.com/WordOps/WordOps.git create log directory mkdir -p /var/log/wo","title":"Clone the github repository"},{"location":"getting-started/installation-guide/#install-wordops","text":"cd WordOps/ python3 setup.py install","title":"Install WordOps"},{"location":"getting-started/installation-guide/#create-wordops-db","text":"mkdir -p /var/lib/wo # Create an empty database for WordOps echo \"CREATE TABLE sites ( id INTEGER PRIMARY KEY AUTOINCREMENT, sitename UNIQUE, site_type CHAR, cache_type CHAR, site_path CHAR, created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP, is_enabled INT, is_ssl INT, storage_fs CHAR, storage_db CHAR, db_name VARCHAR, db_user VARCHAR, db_password VARCHAR, db_host VARCHAR, is_hhvm INT INT DEFAULT '0', php_version VARCHAR );\" | sqlite3 /var/lib/wo/dbase.db # secure the db chown -R root:root /var/lib/wo # Only allow access by root, block others chmod -R 600 /var/lib/wo","title":"Create WordOps db"},{"location":"getting-started/installation-guide/#install-acmesh","text":"# clone the repository git clone <https://github.com/Neilpang/acme.sh.git> /opt/acme.sh -q # create conf directory mkdir -p /etc/letsencrypt/ { config,live,renewal } # install acme.sh cd /opt/acme.sh ./acme.sh --install \\ --home /etc/letsencrypt \\ --config-home /etc/letsencrypt/config \\ --cert-home /etc/letsencrypt/renewal # create .well-known directory mkdir -p /var/www/html/.well-known/acme-challenge # set www-data as owner chown -R www-data:www-data /var/www/html /var/www/html/.well-known # set permissions chmod 750 /var/www/html /var/www/html/.well-known","title":"Install acme.sh"},{"location":"getting-started/installation-guide/#install-wp-cli","text":"wget -qO /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar chmod +x /usr/local/bin/wp","title":"Install WP-CLI"},{"location":"getting-started/post-install-steps/","text":"Post-install Steps \u00b6 These are the first steps after you install WordOps. If you haven't installed it already, please check the installation guide . Enable bash_completion \u00b6 To enable WordOps commands auto-completion, run the following command after WordOps installation : source /etc/bash_completion.d/wo_auto.rc Installing WordOps stacks (optional) \u00b6 Before creating your first site with WordOps, you can install WordOps main stacks with the command wo stack install Here the list of WordOps components installed with the above Component Description Nginx WordOps web server PHP 7.2 PHP7.2-FPM MariaDB 10.3 Open-source version of MySQL WP-CLI The WordPress command-line tool Composer PHP packages manager MySQLTuner Command-line tool to tune MySQL phpMyAdmin MySQL server web interface Adminer lightweight phpMyAdmin alternative OpcacheGUI web interface for Opcache monitoring Netdata Monitoring suite Anemometer MySQL Slow Query Monitor WordOps dashboard Bootstrap template for WordOps backend eXtplorer Web File manager Fail2ban Authentication bruteforce protection","title":"Post-install steps"},{"location":"getting-started/post-install-steps/#post-install-steps","text":"These are the first steps after you install WordOps. If you haven't installed it already, please check the installation guide .","title":"Post-install Steps"},{"location":"getting-started/post-install-steps/#enable-bash_completion","text":"To enable WordOps commands auto-completion, run the following command after WordOps installation : source /etc/bash_completion.d/wo_auto.rc","title":"Enable bash_completion"},{"location":"getting-started/post-install-steps/#installing-wordops-stacks-optional","text":"Before creating your first site with WordOps, you can install WordOps main stacks with the command wo stack install Here the list of WordOps components installed with the above Component Description Nginx WordOps web server PHP 7.2 PHP7.2-FPM MariaDB 10.3 Open-source version of MySQL WP-CLI The WordPress command-line tool Composer PHP packages manager MySQLTuner Command-line tool to tune MySQL phpMyAdmin MySQL server web interface Adminer lightweight phpMyAdmin alternative OpcacheGUI web interface for Opcache monitoring Netdata Monitoring suite Anemometer MySQL Slow Query Monitor WordOps dashboard Bootstrap template for WordOps backend eXtplorer Web File manager Fail2ban Authentication bruteforce protection","title":"Installing WordOps stacks (optional)"},{"location":"getting-started/prerequesites/","text":"Prerequesites \u00b6 Hardware requirements \u00b6 Minimum \u00b6 WordOps is very lightweight, it doesn't require a lot of resources and can be installed on low end devices like Raspberry PI. Minimum requirements are : ~100MB of storage 512MB RAM Recommended \u00b6 However, if you are going to use WordOps in production, some services like MySQL or Redis may need more resources, and running WordOps stacks without enough resources could impact your sites performance. Resources usage also highly depend on your site traffic. Here our recommended hardware configuration for production : Multi-core CPU 20GB SSD storage 2GB RAM Operating Systems \u00b6 The following operating systems are supported: Distribution Release Architecture Ubuntu 16.04 LTS (xenial) x86_64 18.04 LTS (bionic) x86_64 19.04 (disco) x86_64 Debian 8 (jessie) x86_64 9 (stretch) x86_64 10 (buster) - not ready for production x86_64 Raspbian 9 (stretch) armv7l Ports \u00b6 Service Port Inbound Outbound Notes SSH 22 \u2713 \u2713 You are free to use a custom port instead of the default 22 HTTP 80 \u2713 \u2713 Nginx listen on port 80 HTTPS 443 \u2713 \u2713 Nginx listen on port 443 WordOps Backend 22222 \u2713 \u2713 WordOps backend is available on port 22222 and is password protected GnuPG 1137 \u2713 Required to import APT repositories GPG keys.","title":"Prerequisites"},{"location":"getting-started/prerequesites/#prerequesites","text":"","title":"Prerequesites"},{"location":"getting-started/prerequesites/#hardware-requirements","text":"","title":"Hardware requirements"},{"location":"getting-started/prerequesites/#minimum","text":"WordOps is very lightweight, it doesn't require a lot of resources and can be installed on low end devices like Raspberry PI. Minimum requirements are : ~100MB of storage 512MB RAM","title":"Minimum"},{"location":"getting-started/prerequesites/#recommended","text":"However, if you are going to use WordOps in production, some services like MySQL or Redis may need more resources, and running WordOps stacks without enough resources could impact your sites performance. Resources usage also highly depend on your site traffic. Here our recommended hardware configuration for production : Multi-core CPU 20GB SSD storage 2GB RAM","title":"Recommended"},{"location":"getting-started/prerequesites/#operating-systems","text":"The following operating systems are supported: Distribution Release Architecture Ubuntu 16.04 LTS (xenial) x86_64 18.04 LTS (bionic) x86_64 19.04 (disco) x86_64 Debian 8 (jessie) x86_64 9 (stretch) x86_64 10 (buster) - not ready for production x86_64 Raspbian 9 (stretch) armv7l","title":"Operating Systems"},{"location":"getting-started/prerequesites/#ports","text":"Service Port Inbound Outbound Notes SSH 22 \u2713 \u2713 You are free to use a custom port instead of the default 22 HTTP 80 \u2713 \u2713 Nginx listen on port 80 HTTPS 443 \u2713 \u2713 Nginx listen on port 443 WordOps Backend 22222 \u2713 \u2713 WordOps backend is available on port 22222 and is password protected GnuPG 1137 \u2713 Required to import APT repositories GPG keys.","title":"Ports"},{"location":"guides/manage-ssl-certificates/","text":"Manage Let's Encrypt SSL certificates \u00b6 In this guide, we will explain how to issue a Let's Encrypt SSL certificate to secure your site and the different options available. To issue a SSL certificate with WordOps, you can use the following arguments with the commands : wo site create wo site update options description - letsencrypt / - le issue a SSL certificate : domain.tld + www.domain.tld --letsencrypt=subdomain issue a SSL certificate for a subdomain : sub.domain.tld --letsencrypt=wildcard issue a wildcard SSL certificate : domain.tld + *.domain.tld --dns=<dns_api> use DNS API validation for Acme challenge. required for wildcard certificates - le is an alias for --letsencrypt . You can use this alias with all letsencrypt commands. For example, --letsencrypt=wildcard is the same than - le = wildcard Issuing a certificate \u00b6 Webroot mode \u00b6 By default WordOps use the Webroot mode to validate the domain. This mode doesn't require any additional configuration. domain + www.domain.tld \u00b6 To create a new site : wo site create site.tld --wp -le To secure an existant site : wo site update site.tld -le sub-domain \u00b6 To create a new site : wo site create sub.site.tld --wp --letsencrypt = subdomain To secure an existant site : wo site update sub.site.tld --letsencrypt = subdomain DNS API mode \u00b6 Warning Read first our guide about DNS API configuration domain + www.domain.tld \u00b6 To create a new site with Cloudflare DNS API : wo site create site.tld --wp -le --dns = dns_cf To secure an existant site with DigitalOcean DNS API: wo site update site.tld -le --dns = dns_do sub-domain \u00b6 To create a new site with Cloudflare DNS API : wo site create sub.site.tld --wp --letsencrypt = subdomain --dns = dns_cf To secure an existant site with DigitalOcean DNS API: wo site update sub.site.tld --letsencrypt = subdomain --dns = dns_do wildcard \u00b6 To create a new site with Cloudflare DNS API : wo site create site.tld --wp --letsencrypt = wildcard --dns = dns_cf To secure an existant site with DigitalOcean DNS API: wo site update site.tld --letsencrypt = wildcard --dns = dns_do","title":"LetsEncrypt SSL certificates"},{"location":"guides/manage-ssl-certificates/#manage-lets-encrypt-ssl-certificates","text":"In this guide, we will explain how to issue a Let's Encrypt SSL certificate to secure your site and the different options available. To issue a SSL certificate with WordOps, you can use the following arguments with the commands : wo site create wo site update options description - letsencrypt / - le issue a SSL certificate : domain.tld + www.domain.tld --letsencrypt=subdomain issue a SSL certificate for a subdomain : sub.domain.tld --letsencrypt=wildcard issue a wildcard SSL certificate : domain.tld + *.domain.tld --dns=<dns_api> use DNS API validation for Acme challenge. required for wildcard certificates - le is an alias for --letsencrypt . You can use this alias with all letsencrypt commands. For example, --letsencrypt=wildcard is the same than - le = wildcard","title":"Manage Let's Encrypt SSL certificates"},{"location":"guides/manage-ssl-certificates/#issuing-a-certificate","text":"","title":"Issuing a certificate"},{"location":"guides/manage-ssl-certificates/#webroot-mode","text":"By default WordOps use the Webroot mode to validate the domain. This mode doesn't require any additional configuration.","title":"Webroot mode"},{"location":"guides/manage-ssl-certificates/#domain-wwwdomaintld","text":"To create a new site : wo site create site.tld --wp -le To secure an existant site : wo site update site.tld -le","title":"domain + www.domain.tld"},{"location":"guides/manage-ssl-certificates/#sub-domain","text":"To create a new site : wo site create sub.site.tld --wp --letsencrypt = subdomain To secure an existant site : wo site update sub.site.tld --letsencrypt = subdomain","title":"sub-domain"},{"location":"guides/manage-ssl-certificates/#dns-api-mode","text":"Warning Read first our guide about DNS API configuration","title":"DNS API mode"},{"location":"guides/manage-ssl-certificates/#domain-wwwdomaintld_1","text":"To create a new site with Cloudflare DNS API : wo site create site.tld --wp -le --dns = dns_cf To secure an existant site with DigitalOcean DNS API: wo site update site.tld -le --dns = dns_do","title":"domain + www.domain.tld"},{"location":"guides/manage-ssl-certificates/#sub-domain_1","text":"To create a new site with Cloudflare DNS API : wo site create sub.site.tld --wp --letsencrypt = subdomain --dns = dns_cf To secure an existant site with DigitalOcean DNS API: wo site update sub.site.tld --letsencrypt = subdomain --dns = dns_do","title":"sub-domain"},{"location":"guides/manage-ssl-certificates/#wildcard","text":"To create a new site with Cloudflare DNS API : wo site create site.tld --wp --letsencrypt = wildcard --dns = dns_cf To secure an existant site with DigitalOcean DNS API: wo site update site.tld --letsencrypt = wildcard --dns = dns_do","title":"wildcard"},{"location":"guides/migration-from-easyengine/","text":"Migration from EasyEngine v3 \u00b6 Running WordOps install script \u00b6 The first step to migrate from EasyEngine to WordOps is to run WordOps install script with the command : wget -qO wo wops.cc && sudo bash wo Info Before installing WordOps, the install script will backup all previous EasyEngine configurations. You will find them after the installation in / var / lib / wo - backup . It will also create all new Nginx configurations before syncing the old nginx directory with the new one. This way, if you have added custom Nginx configuration, you will find them at the same place than before the migration. Post installation steps \u00b6 After installing WordOps, if all your sites are still working properly, you can start using WordOps the same way than EasyEngine. For sites previously created with EasyEngine, you will have to changes some settings in their configuration to use WordOps new configurations. This can be done with the command wo site update or by editing manually their configuration with the command wo site edit . Warning If some sites are still using php5.6 or php7.0 and are not compatible with newer PHP versions, do not change their vhost configuration. WordOps minimum and default PHP version is PHP 7.2. Additionally, sites previously created with --w3tc will have to use another cache option as we deprecated this stack. Updating site configuration \u00b6 You have the choice between two method to update your site configuration : With the command wo site update (recommended) Manually with the command wo site edit Using the command wo site update \u00b6 The easiest way to update your site with the new WordOps configurations is to use the command : wo site update site.tld <options> To update your sites configuration, you can enable PHP 7.3 on your site with the argument --php73 and then disable it with the argument --php73=off to use PHP 7.2. This will regenerate your site Nginx vhost and apply the new configuration. Example : # enable PHP 7.3 to regenerate site configuration wo site update site.tld --php73 # disable PHP 7.3 to use PHP 7.2 (optional) wo site update site.tld --php73 = off Manually editing site configuration \u00b6 You can edit sites configuration with the command : wo site edit site.tld Info You will be prompt to choose a text editor, if you are new to linux, we recommend you to choose nano. In Nginx vhost configuration, you will find several lines beginning with include . To use new WordOps configuration, you just have to replace the path of the configuration set after include . For example include common / locations . conf ; have to be replaced by include common / locations - wo . conf ; . Warning Make sure to not remove the ; at the end of the line when updating Nginx configuration. For all WordPress related configuration files like wpsc . conf or wpfc - php7 . conf , new configurations files are just named wpsc - php72 . conf or wpfc - php72 . conf . There are some exceptions, list here : Previous configuration New configuration common/locations.conf common/locations-wo.conf common/locations-php7.conf common/locations-wo.conf common/php.conf common/php72.conf common/php7.conf common/php72.conf Removing previous PHP version \u00b6 If you do not need php5.6 and php7.0 anymore, you can safely remove them with the following commands : # php5.6 apt-get -y autoremove php5.6-fpm php5.6-common --purge # php7.0 apt-get -y autoremove php7.0-fpm php7.0-common --purge Upgrading MariaDB to 10.3 \u00b6 Warning Before upgrading MariaDB, we strongly recommend you to perform a backup of your MySQL databases. Backup your databases \u00b6 You can backup your MySQL databases with this simple bash script : wget https://raw.githubusercontent.com/VirtuBox/bash-scripts/master/backup/mysqldump/mysqldump.sh -O mysqldump.sh chmod +x mysqldump.sh Then perform a full backup : ./mysqldump.sh --full This will backup the whole MySQL server and store the gzipped dump in /var/www/mysqldump Additionally you can make a copy of the / var / lib / mysql directory : sudo service mysql stop sudo cp -rf /var/lib/mysql /var/lib/mysql-bak sudo service mysql start Upgrading MariaDB \u00b6 At first, you need to remove the current MariaDB-server installed. To do so, use the command : sudo apt-get autoremove mariadb-server -y Then you can reinstall the latest MariaDB-server version with WordOps : wo stack install --mysql","title":"EasyEngine Migration"},{"location":"guides/migration-from-easyengine/#migration-from-easyengine-v3","text":"","title":"Migration from EasyEngine v3"},{"location":"guides/migration-from-easyengine/#running-wordops-install-script","text":"The first step to migrate from EasyEngine to WordOps is to run WordOps install script with the command : wget -qO wo wops.cc && sudo bash wo Info Before installing WordOps, the install script will backup all previous EasyEngine configurations. You will find them after the installation in / var / lib / wo - backup . It will also create all new Nginx configurations before syncing the old nginx directory with the new one. This way, if you have added custom Nginx configuration, you will find them at the same place than before the migration.","title":"Running WordOps install script"},{"location":"guides/migration-from-easyengine/#post-installation-steps","text":"After installing WordOps, if all your sites are still working properly, you can start using WordOps the same way than EasyEngine. For sites previously created with EasyEngine, you will have to changes some settings in their configuration to use WordOps new configurations. This can be done with the command wo site update or by editing manually their configuration with the command wo site edit . Warning If some sites are still using php5.6 or php7.0 and are not compatible with newer PHP versions, do not change their vhost configuration. WordOps minimum and default PHP version is PHP 7.2. Additionally, sites previously created with --w3tc will have to use another cache option as we deprecated this stack.","title":"Post installation steps"},{"location":"guides/migration-from-easyengine/#updating-site-configuration","text":"You have the choice between two method to update your site configuration : With the command wo site update (recommended) Manually with the command wo site edit","title":"Updating site configuration"},{"location":"guides/migration-from-easyengine/#using-the-command-wo-site-update","text":"The easiest way to update your site with the new WordOps configurations is to use the command : wo site update site.tld <options> To update your sites configuration, you can enable PHP 7.3 on your site with the argument --php73 and then disable it with the argument --php73=off to use PHP 7.2. This will regenerate your site Nginx vhost and apply the new configuration. Example : # enable PHP 7.3 to regenerate site configuration wo site update site.tld --php73 # disable PHP 7.3 to use PHP 7.2 (optional) wo site update site.tld --php73 = off","title":"Using the command wo site update"},{"location":"guides/migration-from-easyengine/#manually-editing-site-configuration","text":"You can edit sites configuration with the command : wo site edit site.tld Info You will be prompt to choose a text editor, if you are new to linux, we recommend you to choose nano. In Nginx vhost configuration, you will find several lines beginning with include . To use new WordOps configuration, you just have to replace the path of the configuration set after include . For example include common / locations . conf ; have to be replaced by include common / locations - wo . conf ; . Warning Make sure to not remove the ; at the end of the line when updating Nginx configuration. For all WordPress related configuration files like wpsc . conf or wpfc - php7 . conf , new configurations files are just named wpsc - php72 . conf or wpfc - php72 . conf . There are some exceptions, list here : Previous configuration New configuration common/locations.conf common/locations-wo.conf common/locations-php7.conf common/locations-wo.conf common/php.conf common/php72.conf common/php7.conf common/php72.conf","title":"Manually editing site configuration"},{"location":"guides/migration-from-easyengine/#removing-previous-php-version","text":"If you do not need php5.6 and php7.0 anymore, you can safely remove them with the following commands : # php5.6 apt-get -y autoremove php5.6-fpm php5.6-common --purge # php7.0 apt-get -y autoremove php7.0-fpm php7.0-common --purge","title":"Removing previous PHP version"},{"location":"guides/migration-from-easyengine/#upgrading-mariadb-to-103","text":"Warning Before upgrading MariaDB, we strongly recommend you to perform a backup of your MySQL databases.","title":"Upgrading MariaDB to 10.3"},{"location":"guides/migration-from-easyengine/#backup-your-databases","text":"You can backup your MySQL databases with this simple bash script : wget https://raw.githubusercontent.com/VirtuBox/bash-scripts/master/backup/mysqldump/mysqldump.sh -O mysqldump.sh chmod +x mysqldump.sh Then perform a full backup : ./mysqldump.sh --full This will backup the whole MySQL server and store the gzipped dump in /var/www/mysqldump Additionally you can make a copy of the / var / lib / mysql directory : sudo service mysql stop sudo cp -rf /var/lib/mysql /var/lib/mysql-bak sudo service mysql start","title":"Backup your databases"},{"location":"guides/migration-from-easyengine/#upgrading-mariadb","text":"At first, you need to remove the current MariaDB-server installed. To do so, use the command : sudo apt-get autoremove mariadb-server -y Then you can reinstall the latest MariaDB-server version with WordOps : wo stack install --mysql","title":"Upgrading MariaDB"},{"location":"how-to/configure-letsencrypt-dns-api-validation/","text":"Let's Encrypt DNS API configuration \u00b6 Warning This feature is available with WordOps v3.9.6 and onward WordOps use acme.sh to handle SSL certificates, which supports domain validation using DNS API. This feature is optional to issue domain and subdomain certificates, but is required to issue wildcard certificates. DNS API configuration \u00b6 WordOps use the Acme client acme.sh to handle Let's Encrypt SSL certificates. It support DNS API with the most part of popular DNS providers, including Cloudflare, DigitalOcean, OVH, Amazon Route53, Linode, Gandi and many others. In this example, we will configure Cloudflare DNS API, but configuration will be pretty similar with other DNS providers. Info DNS providers list and configurations are available in acme.sh wiki Step 1 : get your API credentials \u00b6 Requirements : your Cloudflare account email address your Global API Key available in your Cloudflare profile Step 2 : set your credentials with acme.sh variables \u00b6 Before issuing your first SSL certificate with DNS API, you have to define your API credentials with the command export : Example for Cloudflare : export CF_Key = \"sdfsdfsdfljlbjkljlkjsdfoiwje\" export CF_Email = \"xxxx@sss.com\" CF_Key : Cloudflare Global API key available in your Cloudflare profile CF_Email : Your Cloudflare account email address Example with DigitalOcean : export DO_API_KEY = \"75310dc4ca779ac39a19f6355db573b49ce92ae126553ebd61ac3a3ae34834cc\" Example with GoDaddy : export GD_Key = \"sdfsdfsdfljlbjkljlkjsdfoiwje\" export GD_Secret = \"asdfsdafdsfdsfdsfdsfdsafd\" Info DNS providers list and configurations are available in Acme.sh Wiki Step 3 : issue your certificate \u00b6 For a new site secured with a wildcard SSL certificates with Cloudflare DNS API wo site create site.tld --wp --letsencrypt = wildcard --dns = dns_cf --letsencrypt=wildcard : issue a wildcard certificate domain . tld + * . domain . tld --dns=dns_cf : enable DNS API mode with Cloudflare. For an existant secured with a simple SSL certificate (site + www.site.tld ) with DigitalOcean DNS API wo site update site.tld -le --dns = dns_do - le : issue a certificate for domain . tld + www . domain . tld --dns=dns_do : enable DNS API mode with DigitalOcean Informations \u00b6 You can also use DNS API to issue domain and subdomain certificates. --dns=dns_cf define the DNS provider to use. With DigitalOcean, it would be --dns=dns_do After issuing a first certificate using DNS API, your API credentials will be saved in / etc / letsencrypt / config / account . conf . You do not need to define them anymore.","title":"Configure LetsEncrypt DNS API"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#lets-encrypt-dns-api-configuration","text":"Warning This feature is available with WordOps v3.9.6 and onward WordOps use acme.sh to handle SSL certificates, which supports domain validation using DNS API. This feature is optional to issue domain and subdomain certificates, but is required to issue wildcard certificates.","title":"Let's Encrypt DNS API configuration"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#dns-api-configuration","text":"WordOps use the Acme client acme.sh to handle Let's Encrypt SSL certificates. It support DNS API with the most part of popular DNS providers, including Cloudflare, DigitalOcean, OVH, Amazon Route53, Linode, Gandi and many others. In this example, we will configure Cloudflare DNS API, but configuration will be pretty similar with other DNS providers. Info DNS providers list and configurations are available in acme.sh wiki","title":"DNS API configuration"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#step-1-get-your-api-credentials","text":"Requirements : your Cloudflare account email address your Global API Key available in your Cloudflare profile","title":"Step 1 : get your API credentials"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#step-2-set-your-credentials-with-acmesh-variables","text":"Before issuing your first SSL certificate with DNS API, you have to define your API credentials with the command export : Example for Cloudflare : export CF_Key = \"sdfsdfsdfljlbjkljlkjsdfoiwje\" export CF_Email = \"xxxx@sss.com\" CF_Key : Cloudflare Global API key available in your Cloudflare profile CF_Email : Your Cloudflare account email address Example with DigitalOcean : export DO_API_KEY = \"75310dc4ca779ac39a19f6355db573b49ce92ae126553ebd61ac3a3ae34834cc\" Example with GoDaddy : export GD_Key = \"sdfsdfsdfljlbjkljlkjsdfoiwje\" export GD_Secret = \"asdfsdafdsfdsfdsfdsfdsafd\" Info DNS providers list and configurations are available in Acme.sh Wiki","title":"Step 2 : set your credentials with acme.sh variables"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#step-3-issue-your-certificate","text":"For a new site secured with a wildcard SSL certificates with Cloudflare DNS API wo site create site.tld --wp --letsencrypt = wildcard --dns = dns_cf --letsencrypt=wildcard : issue a wildcard certificate domain . tld + * . domain . tld --dns=dns_cf : enable DNS API mode with Cloudflare. For an existant secured with a simple SSL certificate (site + www.site.tld ) with DigitalOcean DNS API wo site update site.tld -le --dns = dns_do - le : issue a certificate for domain . tld + www . domain . tld --dns=dns_do : enable DNS API mode with DigitalOcean","title":"Step 3 : issue your certificate"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#informations","text":"You can also use DNS API to issue domain and subdomain certificates. --dns=dns_cf define the DNS provider to use. With DigitalOcean, it would be --dns=dns_do After issuing a first certificate using DNS API, your API credentials will be saved in / etc / letsencrypt / config / account . conf . You do not need to define them anymore.","title":"Informations"},{"location":"how-to/get-a-plus-grade-ssllabs/","text":"How to get an A+ Grade on ssllabs with WordOps \u00b6 This tutorial describe how to get the best score with the SSL your site Step 1) Issue an ssl certificate with WordOps and enable HSTS \u00b6 For a new site \u00b6 wo site create site.tld --wp -le --hsts For an existant site \u00b6 wo site update site.tld -le --hsts Enabling HSTS on a site already secured with Let's Encrypt \u00b6 wo site update site.tld --hsts","title":"How to get an A+ Grade on ssllabs with WordOps"},{"location":"how-to/get-a-plus-grade-ssllabs/#how-to-get-an-a-grade-on-ssllabs-with-wordops","text":"This tutorial describe how to get the best score with the SSL your site","title":"How to get an A+ Grade on ssllabs with WordOps"},{"location":"how-to/get-a-plus-grade-ssllabs/#step-1-issue-an-ssl-certificate-with-wordops-and-enable-hsts","text":"","title":"Step 1) Issue an ssl certificate with WordOps and enable HSTS"},{"location":"how-to/get-a-plus-grade-ssllabs/#for-a-new-site","text":"wo site create site.tld --wp -le --hsts","title":"For a new site"},{"location":"how-to/get-a-plus-grade-ssllabs/#for-an-existant-site","text":"wo site update site.tld -le --hsts","title":"For an existant site"},{"location":"how-to/get-a-plus-grade-ssllabs/#enabling-hsts-on-a-site-already-secured-with-lets-encrypt","text":"wo site update site.tld --hsts","title":"Enabling HSTS on a site already secured with Let's Encrypt"},{"location":"how-to/issue-wildcard-ssl-certificate/","text":"How to issue a wildcard SSL certificate ? \u00b6","title":"How to issue a wildcard SSL certificate ?"},{"location":"how-to/issue-wildcard-ssl-certificate/#how-to-issue-a-wildcard-ssl-certificate","text":"","title":"How to issue a wildcard SSL certificate ?"},{"location":"how-to/secure-22222/","text":"How to secure WordOps backend with Let's Encrypt SSL certificate \u00b6 We are currently working on refactoring the Let's Encrypt stack from scratch, to add support for DNS validation, wildcard SSL certificates and to secure WordOps backend automatically. Those new features are planned for the next WordOps release (v4.0). But we have already make some changes on WordOps backend configuration, and it's already easier to secure the backend available on the port 22222 with Let's Encrypt SSL certificate. Secure WordOps backend with the same certificate than another site \u00b6 If you already have a site secured with Let's Encrypt, you just have to copy the ssl . conf file stored in / var / www / site . tld / conf / nginx . sudo cp -f /var/www/site.tld/conf/nginx/ssl.conf /var/www/22222/conf/nginx/ssl.conf Then reload Nginx : sudo service nginx reload You should now be able to access to WordOps backend on https : // site . tld : 22222 Issue a new certificate to secure WordOps backend \u00b6 If you prefer to issue manually a new Let's Encrypt SSL certificate, here the steps to follow : Set your domain or subdomain as a variable : DOMAIN_NAME = backend.site.ltd Issue the certificate acme.sh --issue -d $DOMAIN_NAME -k ec-384 -w /var/www/html If the certificate was issued successfully, create a directory to store the certificate sudo mkdir -p /etc/letsencrypt/live/ ${ DOMAIN_NAME } Install the certificate acme.sh --install-cert -d $DOMAIN_NAME --ecc \\ --cert-file /etc/letsencrypt/live/ $DOMAIN_NAME /cert.pem \\ --key-file /etc/letsencrypt/live/ $DOMAIN_NAME /key.pem \\ --fullchain-file /etc/letsencrypt/live/ $DOMAIN_NAME /fullchain.pem \\ --ca-file /etc/letsencrypt/live/ $DOMAIN_NAME /ca.pem \\ --reloadcmd \"nginx -t && systemctl restart nginx.service\" Create the Nginx configuration cat <<EOF >/var/www/22222/conf/nginx/ssl.conf ssl_certificate /etc/letsencrypt/live/$DOMAIN_NAME/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/$DOMAIN_NAME/key.pem; ssl_trusted_certificate /etc/letsencrypt/live/$DOMAIN_NAME/ca.pem; EOF Then reload nginx sudo service nginx reload","title":"Secure WordOps backend"},{"location":"how-to/secure-22222/#how-to-secure-wordops-backend-with-lets-encrypt-ssl-certificate","text":"We are currently working on refactoring the Let's Encrypt stack from scratch, to add support for DNS validation, wildcard SSL certificates and to secure WordOps backend automatically. Those new features are planned for the next WordOps release (v4.0). But we have already make some changes on WordOps backend configuration, and it's already easier to secure the backend available on the port 22222 with Let's Encrypt SSL certificate.","title":"How to secure WordOps backend with Let's Encrypt SSL certificate"},{"location":"how-to/secure-22222/#secure-wordops-backend-with-the-same-certificate-than-another-site","text":"If you already have a site secured with Let's Encrypt, you just have to copy the ssl . conf file stored in / var / www / site . tld / conf / nginx . sudo cp -f /var/www/site.tld/conf/nginx/ssl.conf /var/www/22222/conf/nginx/ssl.conf Then reload Nginx : sudo service nginx reload You should now be able to access to WordOps backend on https : // site . tld : 22222","title":"Secure WordOps backend with the same certificate than another site"},{"location":"how-to/secure-22222/#issue-a-new-certificate-to-secure-wordops-backend","text":"If you prefer to issue manually a new Let's Encrypt SSL certificate, here the steps to follow : Set your domain or subdomain as a variable : DOMAIN_NAME = backend.site.ltd Issue the certificate acme.sh --issue -d $DOMAIN_NAME -k ec-384 -w /var/www/html If the certificate was issued successfully, create a directory to store the certificate sudo mkdir -p /etc/letsencrypt/live/ ${ DOMAIN_NAME } Install the certificate acme.sh --install-cert -d $DOMAIN_NAME --ecc \\ --cert-file /etc/letsencrypt/live/ $DOMAIN_NAME /cert.pem \\ --key-file /etc/letsencrypt/live/ $DOMAIN_NAME /key.pem \\ --fullchain-file /etc/letsencrypt/live/ $DOMAIN_NAME /fullchain.pem \\ --ca-file /etc/letsencrypt/live/ $DOMAIN_NAME /ca.pem \\ --reloadcmd \"nginx -t && systemctl restart nginx.service\" Create the Nginx configuration cat <<EOF >/var/www/22222/conf/nginx/ssl.conf ssl_certificate /etc/letsencrypt/live/$DOMAIN_NAME/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/$DOMAIN_NAME/key.pem; ssl_trusted_certificate /etc/letsencrypt/live/$DOMAIN_NAME/ca.pem; EOF Then reload nginx sudo service nginx reload","title":"Issue a new certificate to secure WordOps backend"},{"location":"how-to/wp-language/","text":"How to set default language for WordPress install \u00b6 WordOps uses WP-Cli to install and perform other tasks on WordPress blogs. The default language for new blogs is en_US but it can be easily adapted to any other locale. WP-Cli expects a configuration file to be placed on ~/ . wp - cli / config . yml . We won't cover all its possibilities right now, only the configuration required to customize the localisation. For example, in order to have WordPress in Brazilian Portuguese the config . yml file would be: core download : locale : pt_BR Caveats \u00b6 There is a \"caveat\" one should be aware of: when a new version os WordPress is released it usually does not have translations for all possible locales. Setting up a configuration file like the suggestion above might lead to WP-Cli (thus WordOps) to behave inconsistently. How to change locale of a blog already installed \u00b6 In order to avoid such inconsistence, perhaps it's wiser to install WP in en_US as usual, then later change its locale. The root user would do: cd /var/www/example.com/htdocs wp language core install pt_BR --activate --allow-root","title":"Set WordPress language"},{"location":"how-to/wp-language/#how-to-set-default-language-for-wordpress-install","text":"WordOps uses WP-Cli to install and perform other tasks on WordPress blogs. The default language for new blogs is en_US but it can be easily adapted to any other locale. WP-Cli expects a configuration file to be placed on ~/ . wp - cli / config . yml . We won't cover all its possibilities right now, only the configuration required to customize the localisation. For example, in order to have WordPress in Brazilian Portuguese the config . yml file would be: core download : locale : pt_BR","title":"How to set default language for WordPress install"},{"location":"how-to/wp-language/#caveats","text":"There is a \"caveat\" one should be aware of: when a new version os WordPress is released it usually does not have translations for all possible locales. Setting up a configuration file like the suggestion above might lead to WP-Cli (thus WordOps) to behave inconsistently.","title":"Caveats"},{"location":"how-to/wp-language/#how-to-change-locale-of-a-blog-already-installed","text":"In order to avoid such inconsistence, perhaps it's wiser to install WP in en_US as usual, then later change its locale. The root user would do: cd /var/www/example.com/htdocs wp language core install pt_BR --activate --allow-root","title":"How to change locale of a blog already installed"},{"location":"security/recommendations/","text":"Security recommendations \u00b6 In this section, you will find few guides/tutorials about server security and what are the best ways to avoid security issues on your server(s)/site(s). Enable automatic installation of security upgrades \u00b6 Debian and Ubuntu provide an automated security upgrades service with the package automatic installation of security upgrades unattended-upgrades. You can enable automatic installation of security upgrades with the command : sudo dpkg-reconfigure -plow unattended-upgrades","title":"Security recommendations"},{"location":"security/recommendations/#security-recommendations","text":"In this section, you will find few guides/tutorials about server security and what are the best ways to avoid security issues on your server(s)/site(s).","title":"Security recommendations"},{"location":"security/recommendations/#enable-automatic-installation-of-security-upgrades","text":"Debian and Ubuntu provide an automated security upgrades service with the package automatic installation of security upgrades unattended-upgrades. You can enable automatic installation of security upgrades with the command : sudo dpkg-reconfigure -plow unattended-upgrades","title":"Enable automatic installation of security upgrades"}]}