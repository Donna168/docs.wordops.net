{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to WordOps documentation Overview Getting-started Migration from EasyEngine V3 WordOps commands F.A.Q Troubleshooting Important WordOps documentation publication is in progress Credits EasyEngine","title":"Home"},{"location":"#welcome-to-wordops-documentation","text":"","title":"Welcome to WordOps documentation"},{"location":"#overview","text":"Getting-started Migration from EasyEngine V3 WordOps commands F.A.Q Troubleshooting","title":"Overview"},{"location":"#important","text":"WordOps documentation publication is in progress","title":"Important"},{"location":"#credits","text":"EasyEngine","title":"Credits"},{"location":"commands/","text":"WordOps commands Overview command feature example site create, update, delete, list sites wo site create site.tld --wp stack install/remove WordOps server stacks wo stack install --nginx debug commands to do server level debugging wo debug site.tld --php clean clean Wordops cache backend wo clean --fastcgi info display server stack informations wo info --nginx log perform operation on logs wo log show --nginx secure manage WordOps backend authentification wo secure --auth maintenance perform server package updates wo maintenance update update WordOps wo update","title":"Overview"},{"location":"commands/#wordops-commands","text":"","title":"WordOps commands"},{"location":"commands/#overview","text":"command feature example site create, update, delete, list sites wo site create site.tld --wp stack install/remove WordOps server stacks wo stack install --nginx debug commands to do server level debugging wo debug site.tld --php clean clean Wordops cache backend wo clean --fastcgi info display server stack informations wo info --nginx log perform operation on logs wo log show --nginx secure manage WordOps backend authentification wo secure --auth maintenance perform server package updates wo maintenance update update WordOps wo update","title":"Overview"},{"location":"faq/","text":"F.A.Q General questions What is WordOps ? WordOps is a command line tool which ease server administration and WordPress deployment by providing the ability to setup an optimized LEMP stack (Nginx, PHP, MySQL) with simple command like wo stack install --nginx . What are WordOps main feature ? WordOps not only installs and configures the packages needed to deploy a site (Nginx, PHP, MariaDB) but it also takes care of creating Nginx vhosts and the database, installing WordPress and even get a Let's Encrypt SSL certificate, all in one command line. It support multiple cache backend for WordPress, including Nginx fastcgi_cache, Redis cache (full-page cache + object cache) or wp-super-cache, based on a highly optimized Nginx configuration and an hardened security with strict location directives. Which operating systems are supported by WordOps ? WordOps can be installed on Ubuntu LTS (Long Term Service) releases (16.04 & 18.04) as well as on Debian 8 (Jessie) or Debian 9 (stretch) Support for other linux distribution isn't planned. Technical questions Which version of PHP does WordOps support ? WordOps support PHP 7.2 (default) and PHP 7.3. What is the best caching solution for WordPress ? There is no \"best solution\", because there are benefits/disadvantage for each caching solution and it depend on your usage. Here some informations : fastcgi_cache ( --wpfc ) is the simplest solution, because it do not rely on any plugin excepted nginx_helper used to purge cache after content updates. redis-cache ( --wpredis ) is a powerful solution which support multi-server setup and it provide full-page cache in redis via Nginx + object-cache via Redis-Object-Cache plugin (also used to purge cache) wp-super-cache ( --wpsc ) is a basic solution based on a plugin which create and serve static html files. Why gzip compression is disabled by default ? We disabled gzip compression by default due to gzip related security issues when using TLS connection. More informations here BREACH CVE . We replaced gzip by brotli, which provide better performance and compression than gzip. WordOps usage questions How to get a list of WordOps commands ? To get the list of WordOps commands, you can use the command : wo Then for any subcommand, you just have to add the arugment -h or --help to display command informations with examples. wo site --help What is the MySQL root password ? MySQL root password is stored in the file /etc/mysql/conf.d/my.cnf How to change WordOps backend on port 22222 username and password ? You can use the command : wo secure --auth","title":"F.A.Q"},{"location":"faq/#faq","text":"","title":"F.A.Q"},{"location":"faq/#general-questions","text":"","title":"General questions"},{"location":"faq/#what-is-wordops","text":"WordOps is a command line tool which ease server administration and WordPress deployment by providing the ability to setup an optimized LEMP stack (Nginx, PHP, MySQL) with simple command like wo stack install --nginx .","title":"What is WordOps ?"},{"location":"faq/#what-are-wordops-main-feature","text":"WordOps not only installs and configures the packages needed to deploy a site (Nginx, PHP, MariaDB) but it also takes care of creating Nginx vhosts and the database, installing WordPress and even get a Let's Encrypt SSL certificate, all in one command line. It support multiple cache backend for WordPress, including Nginx fastcgi_cache, Redis cache (full-page cache + object cache) or wp-super-cache, based on a highly optimized Nginx configuration and an hardened security with strict location directives.","title":"What are WordOps main feature ?"},{"location":"faq/#which-operating-systems-are-supported-by-wordops","text":"WordOps can be installed on Ubuntu LTS (Long Term Service) releases (16.04 & 18.04) as well as on Debian 8 (Jessie) or Debian 9 (stretch) Support for other linux distribution isn't planned.","title":"Which operating systems are supported by WordOps ?"},{"location":"faq/#technical-questions","text":"","title":"Technical questions"},{"location":"faq/#which-version-of-php-does-wordops-support","text":"WordOps support PHP 7.2 (default) and PHP 7.3.","title":"Which version of PHP does WordOps support ?"},{"location":"faq/#what-is-the-best-caching-solution-for-wordpress","text":"There is no \"best solution\", because there are benefits/disadvantage for each caching solution and it depend on your usage. Here some informations : fastcgi_cache ( --wpfc ) is the simplest solution, because it do not rely on any plugin excepted nginx_helper used to purge cache after content updates. redis-cache ( --wpredis ) is a powerful solution which support multi-server setup and it provide full-page cache in redis via Nginx + object-cache via Redis-Object-Cache plugin (also used to purge cache) wp-super-cache ( --wpsc ) is a basic solution based on a plugin which create and serve static html files.","title":"What is the best caching solution for WordPress ?"},{"location":"faq/#why-gzip-compression-is-disabled-by-default","text":"We disabled gzip compression by default due to gzip related security issues when using TLS connection. More informations here BREACH CVE . We replaced gzip by brotli, which provide better performance and compression than gzip.","title":"Why gzip compression is disabled by default ?"},{"location":"faq/#wordops-usage-questions","text":"","title":"WordOps usage questions"},{"location":"faq/#how-to-get-a-list-of-wordops-commands","text":"To get the list of WordOps commands, you can use the command : wo Then for any subcommand, you just have to add the arugment -h or --help to display command informations with examples. wo site --help","title":"How to get a list of WordOps commands ?"},{"location":"faq/#what-is-the-mysql-root-password","text":"MySQL root password is stored in the file /etc/mysql/conf.d/my.cnf","title":"What is the MySQL root password ?"},{"location":"faq/#how-to-change-wordops-backend-on-port-22222-username-and-password","text":"You can use the command : wo secure --auth","title":"How to change WordOps backend on port 22222 username and password ?"},{"location":"getting-started/","text":"Getting Started Install WordOps You can use our automated installer to setup WordOps. Additional installation method are available in our installation guide wget -qO wo wordops.se/tup && sudo bash wo During the installation, you will be prompt for an username and an email address. WordOps need those informations to configure Git version control and to use it for saving server configurations. Your informations will only be stored in the file .gitconfig. Installing server stacks Method 1 : WordOps Full stack setup (recommended) wo stack install This will setup the LEMP Stack (Nginx, PHP 7.2 and MariaDB) and the admin tools (phpMyAdmin, Netdata, Composer, WP-CLI, MySQLTuner, OpcacheGUI ) Method 2 : Only install required stack If you prefer to only install required stack to run your sites, you can directly use the command wo site create . For example, the following command will only install Nginx : wo site create site.tld --html And this command will only install Nginx and PHP 7.2 : wo site create site.tld --php Additional informations Component Path Site files /var/www/site.tld/htdocs wp-config.php /var/www/site.tld/wp-config.php Additional Nginx conf /var/www/site.ltd/conf/nginx/ Site access/error logs /var/www/site.tld/logs Creating site You can create site with WordOps by using the command wo site create . WordOps will always : install required stack if needed configure Nginx vhost create site directory WordOps can also : create the site database install WordPress (with or without caching) secure site with Let's Encrypt SSL certificate You can see all the options available to create site in the command list site create PHP 7.3 support To create site running with PHP 7.3, you can add the argument --php73 with the command wo site create and wo site update . Here few examples : WordPress site wo site create site.tld --wp --php73 This command will create site.tld running with PHP 7.3 and install WordPress. MySQL + PHP site wo site create site.tld --mysql --php73 Let's Encrypt SSL certificates To secure your site with Let's Encrypt SSL certificate, you can use the argument --letsencrypt or --le with the command wo site create or with the command wo site update when it's an existing site. WordOps always check if a site is already secured with Let's Encrypt before issuing a certificate, and it also configure the certificate with Nginx and add the proper redirection from http to https. Here few examples : Create SSL site wo site create site.tld --wp --letsencrypt This command will create site.tld and issue a certificate for site.tld and www.site.tld Create subdomain SSL site wo site create sub.site.tld --wp --letsencrypt=subdomain This command will create sub.site.tld and issue a certificate only for sub.site.tld Secure existant site wo site update site.tld --letsencrypt This command will issue a certificate for site.tld and www.site.tld.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#install-wordops","text":"You can use our automated installer to setup WordOps. Additional installation method are available in our installation guide wget -qO wo wordops.se/tup && sudo bash wo During the installation, you will be prompt for an username and an email address. WordOps need those informations to configure Git version control and to use it for saving server configurations. Your informations will only be stored in the file .gitconfig.","title":"Install WordOps"},{"location":"getting-started/#installing-server-stacks","text":"","title":"Installing server stacks"},{"location":"getting-started/#method-1-wordops-full-stack-setup-recommended","text":"wo stack install This will setup the LEMP Stack (Nginx, PHP 7.2 and MariaDB) and the admin tools (phpMyAdmin, Netdata, Composer, WP-CLI, MySQLTuner, OpcacheGUI )","title":"Method 1 : WordOps Full stack setup (recommended)"},{"location":"getting-started/#method-2-only-install-required-stack","text":"If you prefer to only install required stack to run your sites, you can directly use the command wo site create . For example, the following command will only install Nginx : wo site create site.tld --html And this command will only install Nginx and PHP 7.2 : wo site create site.tld --php","title":"Method 2 : Only install required stack"},{"location":"getting-started/#additional-informations","text":"Component Path Site files /var/www/site.tld/htdocs wp-config.php /var/www/site.tld/wp-config.php Additional Nginx conf /var/www/site.ltd/conf/nginx/ Site access/error logs /var/www/site.tld/logs","title":"Additional informations"},{"location":"getting-started/#creating-site","text":"You can create site with WordOps by using the command wo site create . WordOps will always : install required stack if needed configure Nginx vhost create site directory WordOps can also : create the site database install WordPress (with or without caching) secure site with Let's Encrypt SSL certificate You can see all the options available to create site in the command list site create","title":"Creating site"},{"location":"getting-started/#php-73-support","text":"To create site running with PHP 7.3, you can add the argument --php73 with the command wo site create and wo site update . Here few examples :","title":"PHP 7.3 support"},{"location":"getting-started/#wordpress-site","text":"wo site create site.tld --wp --php73 This command will create site.tld running with PHP 7.3 and install WordPress.","title":"WordPress site"},{"location":"getting-started/#mysql-php-site","text":"wo site create site.tld --mysql --php73","title":"MySQL + PHP site"},{"location":"getting-started/#lets-encrypt-ssl-certificates","text":"To secure your site with Let's Encrypt SSL certificate, you can use the argument --letsencrypt or --le with the command wo site create or with the command wo site update when it's an existing site. WordOps always check if a site is already secured with Let's Encrypt before issuing a certificate, and it also configure the certificate with Nginx and add the proper redirection from http to https. Here few examples :","title":"Let's Encrypt SSL certificates"},{"location":"getting-started/#create-ssl-site","text":"wo site create site.tld --wp --letsencrypt This command will create site.tld and issue a certificate for site.tld and www.site.tld","title":"Create SSL site"},{"location":"getting-started/#create-subdomain-ssl-site","text":"wo site create sub.site.tld --wp --letsencrypt=subdomain This command will create sub.site.tld and issue a certificate only for sub.site.tld","title":"Create subdomain SSL site"},{"location":"getting-started/#secure-existant-site","text":"wo site update site.tld --letsencrypt This command will issue a certificate for site.tld and www.site.tld.","title":"Secure existant site"},{"location":"installation-guide/","text":"Installation Guide Welcome in WordOps installation guide. WordOps can be installed on Debian 8 (Jessie) or Debian 9 (stretch) as well as on Ubuntu 16.04 LTS(xenial) or Ubuntu 18.04 LTS(bionic). Automated Installation We provide an installer script which install the required dependencies, before setting-up WordOps. It can be installed with the following command : wget -qO wo wordops.se/tup && sudo bash wo Manual Installation If you prefer to perform yourself the same steps than our installer script, here how to install WordOps manually. Install WordOps dependencies # On Ubuntu apt-get install build-essential curl gzip python3 python3-apt python3-setuptools python3-dev sqlite3 git tar software-properties-common pigz gnupg2 fail2ban cron ccze rsync -y # On Debian apt-get install build-essential curl gzip dirmngr sudo python3 python3-apt python3-setuptools python3-dev ca-certificates sqlite3 git tar software-properties-common pigz apt-transport-https gnupg2 fail2ban cron ccze rsync -y Clone the github repository git clone https://github.com/WordOps/WordOps.git Install WordOps cd WordOps/ python3 setup.py install","title":"Installation Guide"},{"location":"installation-guide/#installation-guide","text":"Welcome in WordOps installation guide. WordOps can be installed on Debian 8 (Jessie) or Debian 9 (stretch) as well as on Ubuntu 16.04 LTS(xenial) or Ubuntu 18.04 LTS(bionic).","title":"Installation Guide"},{"location":"installation-guide/#automated-installation","text":"We provide an installer script which install the required dependencies, before setting-up WordOps. It can be installed with the following command : wget -qO wo wordops.se/tup && sudo bash wo","title":"Automated Installation"},{"location":"installation-guide/#manual-installation","text":"If you prefer to perform yourself the same steps than our installer script, here how to install WordOps manually.","title":"Manual Installation"},{"location":"installation-guide/#install-wordops-dependencies","text":"# On Ubuntu apt-get install build-essential curl gzip python3 python3-apt python3-setuptools python3-dev sqlite3 git tar software-properties-common pigz gnupg2 fail2ban cron ccze rsync -y # On Debian apt-get install build-essential curl gzip dirmngr sudo python3 python3-apt python3-setuptools python3-dev ca-certificates sqlite3 git tar software-properties-common pigz apt-transport-https gnupg2 fail2ban cron ccze rsync -y","title":"Install WordOps dependencies"},{"location":"installation-guide/#clone-the-github-repository","text":"git clone https://github.com/WordOps/WordOps.git","title":"Clone the github repository"},{"location":"installation-guide/#install-wordops","text":"cd WordOps/ python3 setup.py install","title":"Install WordOps"},{"location":"migration-from-EasyEngine-V3/","text":"Migration from EasyEngine v3 Available Soon","title":"Migration from EasyEngine v3"},{"location":"migration-from-EasyEngine-V3/#migration-from-easyengine-v3","text":"","title":"Migration from EasyEngine v3"},{"location":"migration-from-EasyEngine-V3/#available-soon","text":"","title":"Available Soon"},{"location":"troubleshooting/","text":"","title":"Troubleshooting"},{"location":"commands/clean/","text":"clean Clean NGINX FastCGI cache, Opcache, Memcached, Redis Cache Usage : wo clean [options] If options are empty, default is --all . optional arguments description --fastcgi clean Nginx fastcgi_cache --redis clean redis cache --memcache clean memcached cache --opcache clean opcache --all clean all cache","title":"clean"},{"location":"commands/clean/#clean","text":"Clean NGINX FastCGI cache, Opcache, Memcached, Redis Cache Usage : wo clean [options] If options are empty, default is --all . optional arguments description --fastcgi clean Nginx fastcgi_cache --redis clean redis cache --memcache clean memcached cache --opcache clean opcache --all clean all cache","title":"clean"},{"location":"commands/debug/","text":"debug Used for server level debugging Usage : wo debug [options]","title":"debug"},{"location":"commands/debug/#debug","text":"Used for server level debugging Usage : wo debug [options]","title":"debug"},{"location":"commands/info/","text":"info Display configuration information related to Nginx, PHP and MySQL Usage : wo info [options] optional arguments description --nginx Get Nginx configuration information --php Get PHP 7.2 configuration information --php73 Get PHP 7.3 configuration information --mysql Get MySQL configuration information","title":"info"},{"location":"commands/info/#info","text":"Display configuration information related to Nginx, PHP and MySQL Usage : wo info [options] optional arguments description --nginx Get Nginx configuration information --php Get PHP 7.2 configuration information --php73 Get PHP 7.3 configuration information --mysql Get MySQL configuration information","title":"info"},{"location":"commands/log/","text":"log Perform operations on Nginx, PHP and MySQL log files Usage : wo log [<site_name>] [options]</site_name> log show Show Nginx, PHP, MySQL log file Usage : wo log show [<site_name>] [options]</site_name> optional arguments description --nginx Show Nginx Error logs file --php Show PHP Error logs file --mysql Show MySQL logs file --wp Show Site specific WordPress logs file","title":"log"},{"location":"commands/log/#log","text":"Perform operations on Nginx, PHP and MySQL log files Usage : wo log [<site_name>] [options]</site_name>","title":"log"},{"location":"commands/log/#log-show","text":"Show Nginx, PHP, MySQL log file Usage : wo log show [<site_name>] [options]</site_name> optional arguments description --nginx Show Nginx Error logs file --php Show PHP Error logs file --mysql Show MySQL logs file --wp Show Site specific WordPress logs file","title":"log show"},{"location":"commands/maintenance/","text":"maintenance Update apt-cache and upgrade packages. Usage : wo maintenance This command is equivalent to : apt update apt dist-upgrade apt autoremove --purge apt autoclean Package update is performed in a non-interactive way, with the \"--force-confold\" policy, to never overwrite packages configurations.","title":"maintenance"},{"location":"commands/maintenance/#maintenance","text":"Update apt-cache and upgrade packages. Usage : wo maintenance This command is equivalent to : apt update apt dist-upgrade apt autoremove --purge apt autoclean Package update is performed in a non-interactive way, with the \"--force-confold\" policy, to never overwrite packages configurations.","title":"maintenance"},{"location":"commands/secure/","text":"secure Secure backend authentification, ip and port Usage : wo secure [options]","title":"secure"},{"location":"commands/secure/#secure","text":"Secure backend authentification, ip and port Usage : wo secure [options]","title":"secure"},{"location":"commands/site/","text":"site Performs website specific operations Usage : wo site (command) [options] site create Usage : wo site create [<site_name>] [options] Basic sites HTML site To create simple html website use this command. wo site create site.tld --html PHP site To create simple php website with no database use this command. wo site create site.tld --php PHP+MySQL site To create simple php website with database use this command. wo site create site.tld --mysql NOTE: You can find MySQL database details in /var/www/site.tld/wo-config.php . Proxy site To create site with Proxy configuration you can use --proxy during site creation wo site create site.tld --proxy=127.0.0.1:3000 This will create proxy site site.tld with proxy destination as 127.0.0.1:3000. Port is optional. Default port : 80. WordPress Following are the WordPress website types you can create website based on Cache Mechanism Standard sites cache PHP example no cache PHP 7.2 wo site create site.tld --wp no cache PHP 7.3 wo site create site.tld --wp --php73 fastcgi_cache PHP 7.2 wo site create site.tld --wpfc fastcgi_cache PHP 7.3 wo site create site.tld --wpfc --php73 wp-super-cache PHP 7.2 wo site create site.tld --wpsc wp-super-cache PHP 7.3 wo site create site.tld --wpsc --php73 redis-cache PHP 7.2 wo site create site.tld --wpredis redis-cache PHP 7.3 wo site create site.tld --wpredis --php73 Multisite subdirectory cache PHP example no cache PHP 7.2 wo site create site.tld --wpsubdir no cache PHP 7.3 wo site create site.tld --wpsubdir --php73 fastcgi_cache PHP 7.2 wo site create site.tld --wpsubdir --wpfc fastcgi_cache PHP 7.3 wo site create site.tld --wpsubdir --wpfc --php73 wp-super-cache PHP 7.2 wo site create site.tld --wpsubdir --wpsc wp-super-cache PHP 7.3 wo site create site.tld --wpsubdir --wpsc --php73 redis-cache PHP 7.2 wo site create site.tld --wpsubdir --wpredis redis-cache PHP 7.3 wo site create site.tld --wpsubdir --wpredis --php73 Multisite subdomain cache PHP example no cache PHP 7.2 wo site create site.tld --wpsubdom no cache PHP 7.3 wo site create site.tld --wpsubdom --php73 fastcgi_cache PHP 7.2 wo site create site.tld --wpsubdir --wpfc fastcgi_cache PHP 7.3 wo site create site.tld --wpsubdom --wpfc --php73 wp-super-cache PHP 7.2 wo site create site.tld --wpsubdom --wpsc wp-super-cache PHP 7.3 wo site create site.tld --wpsubdom --wpsc --php73 redis-cache PHP 7.2 wo site create site.tld --wpsubdom --wpredis redis-cache PHP 7.3 wo site create site.tld --wpsubdom --wpredis --php73 Extra settings Define WordPress administrator user To define wordpress administrator user during site creation use wo site create site.tld --user=admin This will create admin as administrator user in wordpress during installation. If not defined it will take git user name. Define WordPress administrator password To define wordpress administrator password during site creation use wo site create site.tld --pass=password This will set defined password as administrator password. If not defined it will generate random pasword for administrator. If you have special characters, you can quote them using single quotes like this : --pass='my$secret&' Define WordPress administrator email To define wordpress administrator email during site creation use wo site create site.tld --email=wo@site.tld This will set defined email as administrator email. If not defined it will set git email as administrator email. Let's Encrypt WordOps supports Let's Encrypt out of the box. wo site create site.tld --letsencrypt This command will issue a certificate for site.tld + www.site.tld. But WordOps also supports issuing Let's Encrypt certificates with subdomains. wo site create site.tld --letsencrypt=subdomain You can add --letsencrypt to any other flag. PHP 7.3 To create site with PHP 7.3 you can use --php73 during site creation For example, you can create WordPress site running on PHP 7.3 using following command: wo site create site.tld --wp --php73 To create simple php(with v7.3) website with no database use this command. wo site create site.tld --php73 site update Update site configuration Usage : wo site update [<site_name>] [options] options description --html update to html site --php update to php site --mysql update to MySQL + PHP site --php73 update site to PHP 7.3 --php73=off disable PHP 7.3 --wp update site to WordPress without cache --wpfc update site to WordPress with fastcgi_cache --wpsc update site to WordPress with wp-super-cache --wpredis update site to WordPress with redis-cache --wpsubdir update site to WordPress multisite on subdirectories --wpsubdomain update site to WordPress multisite on subdomains --password update admin password for a WordPress site --letsencrypt , --le secure site with Let's Encrypt SSL certificate --letsencrypt=subdomain secure site running on a subdomain with Let's Encrypt --letsencrypt=off disable Let's Encrypt SSL certificate site delete Usage : wo site delete [<site_name>] [options] options description --no-prompt delete website without confirmation prompt --files delete only website files --db delete only database","title":"site"},{"location":"commands/site/#site","text":"Performs website specific operations Usage : wo site (command) [options]","title":"site"},{"location":"commands/site/#site-create","text":"Usage : wo site create [<site_name>] [options]","title":"site create"},{"location":"commands/site/#basic-sites","text":"","title":"Basic sites"},{"location":"commands/site/#html-site","text":"To create simple html website use this command. wo site create site.tld --html","title":"HTML site"},{"location":"commands/site/#php-site","text":"To create simple php website with no database use this command. wo site create site.tld --php","title":"PHP site"},{"location":"commands/site/#phpmysql-site","text":"To create simple php website with database use this command. wo site create site.tld --mysql NOTE: You can find MySQL database details in /var/www/site.tld/wo-config.php .","title":"PHP+MySQL site"},{"location":"commands/site/#proxy-site","text":"To create site with Proxy configuration you can use --proxy during site creation wo site create site.tld --proxy=127.0.0.1:3000 This will create proxy site site.tld with proxy destination as 127.0.0.1:3000. Port is optional. Default port : 80.","title":"Proxy site"},{"location":"commands/site/#wordpress","text":"Following are the WordPress website types you can create website based on Cache Mechanism","title":"WordPress"},{"location":"commands/site/#standard-sites","text":"cache PHP example no cache PHP 7.2 wo site create site.tld --wp no cache PHP 7.3 wo site create site.tld --wp --php73 fastcgi_cache PHP 7.2 wo site create site.tld --wpfc fastcgi_cache PHP 7.3 wo site create site.tld --wpfc --php73 wp-super-cache PHP 7.2 wo site create site.tld --wpsc wp-super-cache PHP 7.3 wo site create site.tld --wpsc --php73 redis-cache PHP 7.2 wo site create site.tld --wpredis redis-cache PHP 7.3 wo site create site.tld --wpredis --php73","title":"Standard sites"},{"location":"commands/site/#multisite-subdirectory","text":"cache PHP example no cache PHP 7.2 wo site create site.tld --wpsubdir no cache PHP 7.3 wo site create site.tld --wpsubdir --php73 fastcgi_cache PHP 7.2 wo site create site.tld --wpsubdir --wpfc fastcgi_cache PHP 7.3 wo site create site.tld --wpsubdir --wpfc --php73 wp-super-cache PHP 7.2 wo site create site.tld --wpsubdir --wpsc wp-super-cache PHP 7.3 wo site create site.tld --wpsubdir --wpsc --php73 redis-cache PHP 7.2 wo site create site.tld --wpsubdir --wpredis redis-cache PHP 7.3 wo site create site.tld --wpsubdir --wpredis --php73","title":"Multisite subdirectory"},{"location":"commands/site/#multisite-subdomain","text":"cache PHP example no cache PHP 7.2 wo site create site.tld --wpsubdom no cache PHP 7.3 wo site create site.tld --wpsubdom --php73 fastcgi_cache PHP 7.2 wo site create site.tld --wpsubdir --wpfc fastcgi_cache PHP 7.3 wo site create site.tld --wpsubdom --wpfc --php73 wp-super-cache PHP 7.2 wo site create site.tld --wpsubdom --wpsc wp-super-cache PHP 7.3 wo site create site.tld --wpsubdom --wpsc --php73 redis-cache PHP 7.2 wo site create site.tld --wpsubdom --wpredis redis-cache PHP 7.3 wo site create site.tld --wpsubdom --wpredis --php73","title":"Multisite subdomain"},{"location":"commands/site/#extra-settings","text":"Define WordPress administrator user To define wordpress administrator user during site creation use wo site create site.tld --user=admin This will create admin as administrator user in wordpress during installation. If not defined it will take git user name. Define WordPress administrator password To define wordpress administrator password during site creation use wo site create site.tld --pass=password This will set defined password as administrator password. If not defined it will generate random pasword for administrator. If you have special characters, you can quote them using single quotes like this : --pass='my$secret&' Define WordPress administrator email To define wordpress administrator email during site creation use wo site create site.tld --email=wo@site.tld This will set defined email as administrator email. If not defined it will set git email as administrator email.","title":"Extra settings"},{"location":"commands/site/#lets-encrypt","text":"WordOps supports Let's Encrypt out of the box. wo site create site.tld --letsencrypt This command will issue a certificate for site.tld + www.site.tld. But WordOps also supports issuing Let's Encrypt certificates with subdomains. wo site create site.tld --letsencrypt=subdomain You can add --letsencrypt to any other flag.","title":"Let's Encrypt"},{"location":"commands/site/#php-73","text":"To create site with PHP 7.3 you can use --php73 during site creation For example, you can create WordPress site running on PHP 7.3 using following command: wo site create site.tld --wp --php73 To create simple php(with v7.3) website with no database use this command. wo site create site.tld --php73","title":"PHP 7.3"},{"location":"commands/site/#site-update","text":"Update site configuration Usage : wo site update [<site_name>] [options] options description --html update to html site --php update to php site --mysql update to MySQL + PHP site --php73 update site to PHP 7.3 --php73=off disable PHP 7.3 --wp update site to WordPress without cache --wpfc update site to WordPress with fastcgi_cache --wpsc update site to WordPress with wp-super-cache --wpredis update site to WordPress with redis-cache --wpsubdir update site to WordPress multisite on subdirectories --wpsubdomain update site to WordPress multisite on subdomains --password update admin password for a WordPress site --letsencrypt , --le secure site with Let's Encrypt SSL certificate --letsencrypt=subdomain secure site running on a subdomain with Let's Encrypt --letsencrypt=off disable Let's Encrypt SSL certificate","title":"site update"},{"location":"commands/site/#site-delete","text":"Usage : wo site delete [<site_name>] [options] options description --no-prompt delete website without confirmation prompt --files delete only website files --db delete only database","title":"site delete"},{"location":"commands/stack/","text":"stack Manage server stack operations Usage : wo stack (command) [options] options description install Install packages reload Reload WordOps stack remove Uninstall packages purge Uninstall & purge packages restart Restart WordOps stack stop Stop WordOps stack upgrade Upgrade WordOps stack start Start WordOps stack stack install Usage : wo stack install [options] Web This will install Nginx, PHP 7.2, MariaDB & additional tools available on port 22222 wo stack install or wo stack install web Admin tools WordOps backend with PHPmyAdmin, Adminer, MemcachedAdmin etc.. wo stack install --admin Individual packages Nginx wo stack install --nginx PHP 7.2 wo stack install --php MariaDB (MySQL) wo stack install --mysql Adminer wo stack install --adminer PHPMyAdmin wo stack install --phpmyadmin","title":"stack"},{"location":"commands/stack/#stack","text":"Manage server stack operations Usage : wo stack (command) [options] options description install Install packages reload Reload WordOps stack remove Uninstall packages purge Uninstall & purge packages restart Restart WordOps stack stop Stop WordOps stack upgrade Upgrade WordOps stack start Start WordOps stack","title":"stack"},{"location":"commands/stack/#stack-install","text":"Usage : wo stack install [options]","title":"stack install"},{"location":"commands/stack/#web","text":"This will install Nginx, PHP 7.2, MariaDB & additional tools available on port 22222 wo stack install or wo stack install web","title":"Web"},{"location":"commands/stack/#admin-tools","text":"WordOps backend with PHPmyAdmin, Adminer, MemcachedAdmin etc.. wo stack install --admin","title":"Admin tools"},{"location":"commands/stack/#individual-packages","text":"","title":"Individual packages"},{"location":"commands/stack/#nginx","text":"wo stack install --nginx","title":"Nginx"},{"location":"commands/stack/#php-72","text":"wo stack install --php","title":"PHP 7.2"},{"location":"commands/stack/#mariadb-mysql","text":"wo stack install --mysql","title":"MariaDB (MySQL)"},{"location":"commands/stack/#adminer","text":"wo stack install --adminer","title":"Adminer"},{"location":"commands/stack/#phpmyadmin","text":"wo stack install --phpmyadmin","title":"PHPMyAdmin"},{"location":"commands/update/","text":"update Update WordOps if a new version is available Usage : wo update","title":"update"},{"location":"commands/update/#update","text":"Update WordOps if a new version is available Usage : wo update","title":"update"}]}